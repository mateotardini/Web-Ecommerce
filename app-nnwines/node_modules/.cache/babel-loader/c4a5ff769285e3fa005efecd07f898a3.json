{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { BaseNavigationContainer, getActionFromState, getPathFromState, getStateFromPath, validatePathConfig } from '@react-navigation/core';\nimport * as React from 'react';\nimport LinkingContext from './LinkingContext';\nimport DefaultTheme from './theming/DefaultTheme';\nimport ThemeProvider from './theming/ThemeProvider';\nimport useBackButton from './useBackButton';\nimport useDocumentTitle from './useDocumentTitle';\nimport useLinking from './useLinking';\nimport useThenable from './useThenable';\nglobal.REACT_NAVIGATION_DEVTOOLS = new WeakMap();\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onReady Callback which is called after the navigation tree mounts.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.documentTitle Options to configure the document title on Web. Updating document title is handled by default unless `documentTitle.enabled` is `false`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\n\nfunction NavigationContainerInner(_ref, ref) {\n  let {\n    theme = DefaultTheme,\n    linking,\n    fallback = null,\n    documentTitle,\n    onReady,\n    ...rest\n  } = _ref;\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n\n  if (linking !== null && linking !== void 0 && linking.config) {\n    validatePathConfig(linking.config);\n  }\n\n  const refContainer = React.useRef(null);\n  useBackButton(refContainer);\n  useDocumentTitle(refContainer, documentTitle);\n  const {\n    getInitialState\n  } = useLinking(refContainer, {\n    independent: rest.independent,\n    enabled: isLinkingEnabled,\n    prefixes: [],\n    ...linking\n  }); // Add additional linking related info to the ref\n  // This will be used by the devtools\n\n  React.useEffect(() => {\n    if (refContainer.current) {\n      REACT_NAVIGATION_DEVTOOLS.set(refContainer.current, {\n        get linking() {\n          var _linking$prefixes, _linking$getStateFrom, _linking$getPathFromS, _linking$getActionFro;\n\n          return { ...linking,\n            enabled: isLinkingEnabled,\n            prefixes: (_linking$prefixes = linking === null || linking === void 0 ? void 0 : linking.prefixes) !== null && _linking$prefixes !== void 0 ? _linking$prefixes : [],\n            getStateFromPath: (_linking$getStateFrom = linking === null || linking === void 0 ? void 0 : linking.getStateFromPath) !== null && _linking$getStateFrom !== void 0 ? _linking$getStateFrom : getStateFromPath,\n            getPathFromState: (_linking$getPathFromS = linking === null || linking === void 0 ? void 0 : linking.getPathFromState) !== null && _linking$getPathFromS !== void 0 ? _linking$getPathFromS : getPathFromState,\n            getActionFromState: (_linking$getActionFro = linking === null || linking === void 0 ? void 0 : linking.getActionFromState) !== null && _linking$getActionFro !== void 0 ? _linking$getActionFro : getActionFromState\n          };\n        }\n\n      });\n    }\n  });\n  const [isResolved, initialState] = useThenable(getInitialState);\n  React.useImperativeHandle(ref, () => refContainer.current);\n  const linkingContext = React.useMemo(() => ({\n    options: linking\n  }), [linking]);\n  const isReady = rest.initialState != null || !isLinkingEnabled || isResolved;\n  const onReadyRef = React.useRef(onReady);\n  React.useEffect(() => {\n    onReadyRef.current = onReady;\n  });\n  React.useEffect(() => {\n    if (isReady) {\n      var _onReadyRef$current;\n\n      (_onReadyRef$current = onReadyRef.current) === null || _onReadyRef$current === void 0 ? void 0 : _onReadyRef$current.call(onReadyRef);\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback;\n  }\n\n  return /*#__PURE__*/React.createElement(LinkingContext.Provider, {\n    value: linkingContext\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    value: theme\n  }, /*#__PURE__*/React.createElement(BaseNavigationContainer, _extends({}, rest, {\n    initialState: rest.initialState == null ? initialState : rest.initialState,\n    ref: refContainer\n  }))));\n}\n\nconst NavigationContainer = /*#__PURE__*/React.forwardRef(NavigationContainerInner);\nexport default NavigationContainer;","map":{"version":3,"mappings":"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","names":["BaseNavigationContainer","getActionFromState","getPathFromState","getStateFromPath","validatePathConfig","React","LinkingContext","DefaultTheme","ThemeProvider","useBackButton","useDocumentTitle","useLinking","useThenable","global","REACT_NAVIGATION_DEVTOOLS","WeakMap","NavigationContainerInner","ref","theme","linking","fallback","documentTitle","onReady","rest","_ref","isLinkingEnabled","enabled","config","refContainer","useRef","getInitialState","independent","prefixes","useEffect","current","set","isResolved","initialState","useImperativeHandle","linkingContext","useMemo","options","isReady","onReadyRef","Provider","value","NavigationContainer","forwardRef"],"sources":["C:\\Users\\mateo\\Desktop\\React\\react-test\\node_modules\\@react-navigation\\native\\lib\\module\\NavigationContainer.tsx"],"sourcesContent":["import {\n  BaseNavigationContainer,\n  getActionFromState,\n  getPathFromState,\n  getStateFromPath,\n  NavigationContainerProps,\n  NavigationContainerRef,\n  ParamListBase,\n  validatePathConfig,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\nimport DefaultTheme from './theming/DefaultTheme';\nimport ThemeProvider from './theming/ThemeProvider';\nimport type { DocumentTitleOptions, LinkingOptions, Theme } from './types';\nimport useBackButton from './useBackButton';\nimport useDocumentTitle from './useDocumentTitle';\nimport useLinking from './useLinking';\nimport useThenable from './useThenable';\n\ndeclare global {\n  var REACT_NAVIGATION_DEVTOOLS: WeakMap<\n    NavigationContainerRef<any>,\n    { readonly linking: LinkingOptions<any> }\n  >;\n}\n\nglobal.REACT_NAVIGATION_DEVTOOLS = new WeakMap();\n\ntype Props<ParamList extends {}> = NavigationContainerProps & {\n  theme?: Theme;\n  linking?: LinkingOptions<ParamList>;\n  fallback?: React.ReactNode;\n  documentTitle?: DocumentTitleOptions;\n  onReady?: () => void;\n};\n\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onReady Callback which is called after the navigation tree mounts.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.documentTitle Options to configure the document title on Web. Updating document title is handled by default unless `documentTitle.enabled` is `false`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nfunction NavigationContainerInner(\n  {\n    theme = DefaultTheme,\n    linking,\n    fallback = null,\n    documentTitle,\n    onReady,\n    ...rest\n  }: Props<ParamListBase>,\n  ref?: React.Ref<NavigationContainerRef<ParamListBase> | null>\n) {\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n\n  if (linking?.config) {\n    validatePathConfig(linking.config);\n  }\n\n  const refContainer =\n    React.useRef<NavigationContainerRef<ParamListBase>>(null);\n\n  useBackButton(refContainer);\n  useDocumentTitle(refContainer, documentTitle);\n\n  const { getInitialState } = useLinking(refContainer, {\n    independent: rest.independent,\n    enabled: isLinkingEnabled,\n    prefixes: [],\n    ...linking,\n  });\n\n  // Add additional linking related info to the ref\n  // This will be used by the devtools\n  React.useEffect(() => {\n    if (refContainer.current) {\n      REACT_NAVIGATION_DEVTOOLS.set(refContainer.current, {\n        get linking() {\n          return {\n            ...linking,\n            enabled: isLinkingEnabled,\n            prefixes: linking?.prefixes ?? [],\n            getStateFromPath: linking?.getStateFromPath ?? getStateFromPath,\n            getPathFromState: linking?.getPathFromState ?? getPathFromState,\n            getActionFromState:\n              linking?.getActionFromState ?? getActionFromState,\n          };\n        },\n      });\n    }\n  });\n\n  const [isResolved, initialState] = useThenable(getInitialState);\n\n  React.useImperativeHandle(ref, () => refContainer.current);\n\n  const linkingContext = React.useMemo(() => ({ options: linking }), [linking]);\n\n  const isReady = rest.initialState != null || !isLinkingEnabled || isResolved;\n\n  const onReadyRef = React.useRef(onReady);\n\n  React.useEffect(() => {\n    onReadyRef.current = onReady;\n  });\n\n  React.useEffect(() => {\n    if (isReady) {\n      onReadyRef.current?.();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback as React.ReactElement;\n  }\n\n  return (\n    <LinkingContext.Provider value={linkingContext}>\n      <ThemeProvider value={theme}>\n        <BaseNavigationContainer\n          {...rest}\n          initialState={\n            rest.initialState == null ? initialState : rest.initialState\n          }\n          ref={refContainer}\n        />\n      </ThemeProvider>\n    </LinkingContext.Provider>\n  );\n}\n\nconst NavigationContainer = React.forwardRef(NavigationContainerInner) as <\n  RootParamList extends {} = ReactNavigation.RootParamList\n>(\n  props: Props<RootParamList> & {\n    ref?: React.Ref<NavigationContainerRef<RootParamList>>;\n  }\n) => React.ReactElement;\n\nexport default NavigationContainer;\n"]},"metadata":{},"sourceType":"module"}