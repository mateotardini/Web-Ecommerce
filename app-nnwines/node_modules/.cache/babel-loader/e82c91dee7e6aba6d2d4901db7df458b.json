{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\mateo\\\\Desktop\\\\React\\\\react-test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\mateo\\\\Desktop\\\\React\\\\react-test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport canUseDOM from '../../modules/canUseDom';\nvar dimensions = {\n  window: {\n    fontScale: 1,\n    height: 0,\n    scale: 1,\n    width: 0\n  },\n  screen: {\n    fontScale: 1,\n    height: 0,\n    scale: 1,\n    width: 0\n  }\n};\nvar listeners = {};\nvar shouldInit = canUseDOM;\n\nvar Dimensions = /*#__PURE__*/function () {\n  function Dimensions() {\n    _classCallCheck(this, Dimensions);\n  }\n\n  _createClass(Dimensions, null, [{\n    key: \"get\",\n    value: function get(dimension) {\n      if (shouldInit) {\n        shouldInit = false;\n\n        Dimensions._update();\n      }\n\n      invariant(dimensions[dimension], \"No dimension set for key \" + dimension);\n      return dimensions[dimension];\n    }\n  }, {\n    key: \"set\",\n    value: function set(initialDimensions) {\n      if (initialDimensions) {\n        if (canUseDOM) {\n          invariant(false, 'Dimensions cannot be set in the browser');\n        } else {\n          if (initialDimensions.screen != null) {\n            dimensions.screen = initialDimensions.screen;\n          }\n\n          if (initialDimensions.window != null) {\n            dimensions.window = initialDimensions.window;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      if (!canUseDOM) {\n        return;\n      }\n\n      var win = window;\n      var docEl = win.document.documentElement;\n      dimensions.window = {\n        fontScale: 1,\n        height: docEl.clientHeight,\n        scale: win.devicePixelRatio || 1,\n        width: docEl.clientWidth\n      };\n      dimensions.screen = {\n        fontScale: 1,\n        height: win.screen.height,\n        scale: win.devicePixelRatio || 1,\n        width: win.screen.width\n      };\n\n      if (Array.isArray(listeners['change'])) {\n        listeners['change'].forEach(function (handler) {\n          return handler(dimensions);\n        });\n      }\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, handler) {\n      var _this = this;\n\n      listeners[type] = listeners[type] || [];\n      listeners[type].push(handler);\n      return {\n        remove: function remove() {\n          _this.removeEventListener(type, handler);\n        }\n      };\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, handler) {\n      if (Array.isArray(listeners[type])) {\n        listeners[type] = listeners[type].filter(function (_handler) {\n          return _handler !== handler;\n        });\n      }\n    }\n  }]);\n\n  return Dimensions;\n}();\n\nexport { Dimensions as default };\n\nif (canUseDOM) {\n  window.addEventListener('resize', Dimensions._update, false);\n}","map":null,"metadata":{},"sourceType":"module"}