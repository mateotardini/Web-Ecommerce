{"ast":null,"code":"import * as React from 'react';\nimport isArrayEqual from './isArrayEqual';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nexport default function useOnGetState(_ref) {\n  let {\n    getState,\n    getStateListeners\n  } = _ref;\n  const {\n    addKeyedListener\n  } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState(); // Avoid returning new route objects if we don't need to\n\n    const routes = state.routes.map(route => {\n      var _getStateListeners$ro;\n\n      const childState = (_getStateListeners$ro = getStateListeners[route.key]) === null || _getStateListeners$ro === void 0 ? void 0 : _getStateListeners$ro.call(getStateListeners);\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route,\n        state: childState\n      };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state,\n      routes\n    };\n  }, [getState, getStateListeners]);\n  React.useEffect(() => {\n    return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,wBAAP,MAEO,4BAFP;AAGA,OAAOC,sBAAP,MAAmC,0BAAnC;AAOA,eAAe,SAASC,aAAT,OAGH;EAAA,IAH0B;IACpCC,QADoC;IAEpCC;EAFoC,IAG1BC;EACV,MAAM;IAAEC;EAAF,IAAuBR,KAAK,CAACS,UAANT,CAAiBE,wBAAjBF,CAA7B;EACA,MAAMU,KAAK,GAAGV,KAAK,CAACS,UAANT,CAAiBG,sBAAjBH,CAAd;EACA,MAAMW,GAAG,GAAGD,KAAK,GAAGA,KAAK,CAACC,GAAT,GAAe,MAAhC;EAEA,MAAMC,kBAAkB,GAAGZ,KAAK,CAACa,WAANb,CAAkB,MAAM;IACjD,MAAMc,KAAK,GAAGT,QAAQ,EAAtB,CADiD,CAGjD;;IACA,MAAMU,MAAM,GAAGD,KAAK,CAACC,MAAND,CAAaE,GAAbF,CAAkBJ,KAAD,IAAW;MAAA;;MACzC,MAAMO,UAAU,4BAAGX,iBAAiB,CAACI,KAAK,CAACC,GAAP,CAApB,0DAAGO,6CAAnB;;MAEA,IAAIR,KAAK,CAACI,KAANJ,KAAgBO,UAApB,EAAgC;QAC9B,OAAOP,KAAP;MACD;;MAED,OAAO,EAAE,GAAGA,KAAL;QAAYI,KAAK,EAAEG;MAAnB,CAAP;IAPa,EAAf;;IAUA,IAAIhB,YAAY,CAACa,KAAK,CAACC,MAAP,EAAeA,MAAf,CAAhB,EAAwC;MACtC,OAAOD,KAAP;IACD;;IAED,OAAO,EAAE,GAAGA,KAAL;MAAYC;IAAZ,CAAP;EAlByB,GAmBxB,CAACV,QAAD,EAAWC,iBAAX,CAnBwBN,CAA3B;EAqBAA,KAAK,CAACmB,SAANnB,CAAgB,MAAM;IACpB,OAAOQ,gBAAP,SAAOA,oBAAP,WAAOA,GAAP,MAAOA,mBAAgB,CAAG,UAAH,EAAeG,GAAf,EAAoBC,kBAApB,CAAvB;EADF,GAEG,CAACJ,gBAAD,EAAmBI,kBAAnB,EAAuCD,GAAvC,CAFHX;AAGD","names":["React","isArrayEqual","NavigationBuilderContext","NavigationRouteContext","useOnGetState","getState","getStateListeners","_ref","addKeyedListener","useContext","route","key","getRehydratedState","useCallback","state","routes","map","childState","_getStateListeners$ro","useEffect"],"sources":["C:\\Users\\mateo\\Desktop\\React\\react-test\\node_modules\\@react-navigation\\core\\lib\\module\\useOnGetState.tsx"],"sourcesContent":["import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport isArrayEqual from './isArrayEqual';\nimport NavigationBuilderContext, {\n  GetStateListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\n\ntype Options = {\n  getState: () => NavigationState;\n  getStateListeners: Record<string, GetStateListener | undefined>;\n};\n\nexport default function useOnGetState({\n  getState,\n  getStateListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n\n    // Avoid returning new route objects if we don't need to\n    const routes = state.routes.map((route) => {\n      const childState = getStateListeners[route.key]?.();\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route, state: childState };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state, routes };\n  }, [getState, getStateListeners]);\n\n  React.useEffect(() => {\n    return addKeyedListener?.('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}\n"]},"metadata":{},"sourceType":"module"}