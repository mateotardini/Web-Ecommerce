{"ast":null,"code":"import * as React from 'react';\n/**\n * Hook which lets child navigators add action listeners.\n */\n\nexport default function useChildListeners() {\n  const {\n    current: listeners\n  } = React.useRef({\n    action: [],\n    focus: []\n  });\n  const addListener = React.useCallback((type, listener) => {\n    listeners[type].push(listener);\n    let removed = false;\n    return () => {\n      const index = listeners[type].indexOf(listener);\n\n      if (!removed && index > -1) {\n        removed = true;\n        listeners[type].splice(index, 1);\n      }\n    };\n  }, [listeners]);\n  return {\n    listeners,\n    addListener\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAIA;AACA;AACA;;AACA,eAAe,SAASC,iBAAT,GAA6B;EAC1C,MAAM;IAAEC,OAAO,EAAEC;EAAX,IAAyBH,KAAK,CAACI,MAANJ,CAE5B;IACDK,MAAM,EAAE,EADP;IAEDC,KAAK,EAAE;EAFN,CAF4BN,CAA/B;EAOA,MAAMO,WAAW,GAAGP,KAAK,CAACQ,WAANR,CAClB,CAA8BS,IAA9B,EAAuCC,QAAvC,KAAoE;IAClEP,SAAS,CAACM,IAAD,CAATN,CAAgBQ,IAAhBR,CAAqBO,QAArBP;IAEA,IAAIS,OAAO,GAAG,KAAd;IACA,OAAO,MAAM;MACX,MAAMC,KAAK,GAAGV,SAAS,CAACM,IAAD,CAATN,CAAgBW,OAAhBX,CAAwBO,QAAxBP,CAAd;;MAEA,IAAI,CAACS,OAAD,IAAYC,KAAK,GAAG,CAAC,CAAzB,EAA4B;QAC1BD,OAAO,GAAG,IAAVA;QACAT,SAAS,CAACM,IAAD,CAATN,CAAgBY,MAAhBZ,CAAuBU,KAAvBV,EAA8B,CAA9BA;MACD;IANH;EALgB,GAclB,CAACA,SAAD,CAdkBH,CAApB;EAiBA,OAAO;IACLG,SADK;IAELI;EAFK,CAAP;AAID","names":["React","useChildListeners","current","listeners","useRef","action","focus","addListener","useCallback","type","listener","push","removed","index","indexOf","splice"],"sources":["C:\\Users\\mateo\\Desktop\\React\\react-test\\node_modules\\@react-navigation\\core\\lib\\module\\useChildListeners.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport type { ListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add action listeners.\n */\nexport default function useChildListeners() {\n  const { current: listeners } = React.useRef<{\n    [K in keyof ListenerMap]: ListenerMap[K][];\n  }>({\n    action: [],\n    focus: [],\n  });\n\n  const addListener = React.useCallback(\n    <T extends keyof ListenerMap>(type: T, listener: ListenerMap[T]) => {\n      listeners[type].push(listener);\n\n      let removed = false;\n      return () => {\n        const index = listeners[type].indexOf(listener);\n\n        if (!removed && index > -1) {\n          removed = true;\n          listeners[type].splice(index, 1);\n        }\n      };\n    },\n    [listeners]\n  );\n\n  return {\n    listeners,\n    addListener,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}