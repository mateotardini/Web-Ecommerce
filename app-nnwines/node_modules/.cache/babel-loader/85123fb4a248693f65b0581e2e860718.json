{"ast":null,"code":"import * as React from 'react';\nimport { Dimensions, Platform, StyleSheet, View } from 'react-native';\nimport { initialWindowMetrics, SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\nconst {\n  width = 0,\n  height = 0\n} = Dimensions.get('window'); // To support SSR on web, we need to have empty insets for initial values\n// Otherwise there can be mismatch between SSR and client output\n// We also need to specify empty values to support tests environments\n\nconst initialMetrics = Platform.OS === 'web' || initialWindowMetrics == null ? {\n  frame: {\n    x: 0,\n    y: 0,\n    width,\n    height\n  },\n  insets: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n} : initialWindowMetrics;\nexport default function SafeAreaProviderCompat(_ref) {\n  let {\n    children,\n    style\n  } = _ref;\n  return /*#__PURE__*/React.createElement(SafeAreaInsetsContext.Consumer, null, insets => {\n    if (insets) {\n      // If we already have insets, don't wrap the stack in another safe area provider\n      // This avoids an issue with updates at the cost of potentially incorrect values\n      // https://github.com/react-navigation/react-navigation/issues/174\n      return /*#__PURE__*/React.createElement(View, {\n        style: [styles.container, style]\n      }, children);\n    }\n\n    return /*#__PURE__*/React.createElement(SafeAreaProvider, {\n      initialMetrics: initialMetrics,\n      style: style\n    }, children);\n  });\n}\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,UADF,EAEEC,QAFF,EAIEC,UAJF,EAKEC,IALF,QAOO,cAPP;AAQA,SACEC,oBADF,EAEEC,qBAFF,EAGEC,gBAHF,QAIO,gCAJP;AAWA,MAAM;EAAEC,KAAK,GAAG,CAAV;EAAaC,MAAM,GAAG;AAAtB,IAA4BR,UAAU,CAACS,GAAXT,CAAe,QAAfA,CAAlC,C,CAEA;AACA;AACA;;AACA,MAAMU,cAAc,GAClBT,QAAQ,CAACU,EAATV,KAAgB,KAAhBA,IAAyBG,oBAAoB,IAAI,IAAjDH,GACI;EACEW,KAAK,EAAE;IAAEC,CAAC,EAAE,CAAL;IAAQC,CAAC,EAAE,CAAX;IAAcP,KAAd;IAAqBC;EAArB,CADT;EAEEO,MAAM,EAAE;IAAEC,GAAG,EAAE,CAAP;IAAUC,IAAI,EAAE,CAAhB;IAAmBC,KAAK,EAAE,CAA1B;IAA6BC,MAAM,EAAE;EAArC;AAFV,CADJlB,GAKIG,oBANN;AAQA,eAAe,SAASgB,sBAAT,OAA4D;EAAA,IAA5B;IAAEC,QAAF;IAAYC;EAAZ,IAA4BC;EACzE,oBACExB,oBAACM,qBAAD,CAAuBmB,QAAvB,QACIT,MAAD,IAAY;IACX,IAAIA,MAAJ,EAAY;MACV;MACA;MACA;MACA,oBAAOhB,oBAACI,IAAD;QAAMmB,KAAK,EAAE,CAACG,MAAM,CAACC,SAAR,EAAmBJ,KAAnB;MAAb,GAAyCD,QAAzC,CAAP;IACD;;IAED,oBACEtB,oBAACO,gBAAD;MAAkBI,cAAc,EAAEA,cAAlC;MAAkDY,KAAK,EAAEA;IAAzD,GACGD,QADH,CADF;EATJ,EADF;AAkBD;AAEDD,sBAAsB,CAACV,cAAvBU,GAAwCV,cAAxCU;AAEA,MAAMK,MAAM,GAAGvB,UAAU,CAACyB,MAAXzB,CAAkB;EAC/BwB,SAAS,EAAE;IACTE,IAAI,EAAE;EADG;AADoB,CAAlB1B,CAAf","names":["React","Dimensions","Platform","StyleSheet","View","initialWindowMetrics","SafeAreaInsetsContext","SafeAreaProvider","width","height","get","initialMetrics","OS","frame","x","y","insets","top","left","right","bottom","SafeAreaProviderCompat","children","style","_ref","Consumer","styles","container","create","flex"],"sources":["C:\\Users\\mateo\\Desktop\\React\\react-test\\node_modules\\@react-navigation\\elements\\lib\\module\\SafeAreaProviderCompat.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Dimensions,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport {\n  initialWindowMetrics,\n  SafeAreaInsetsContext,\n  SafeAreaProvider,\n} from 'react-native-safe-area-context';\n\ntype Props = {\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst { width = 0, height = 0 } = Dimensions.get('window');\n\n// To support SSR on web, we need to have empty insets for initial values\n// Otherwise there can be mismatch between SSR and client output\n// We also need to specify empty values to support tests environments\nconst initialMetrics =\n  Platform.OS === 'web' || initialWindowMetrics == null\n    ? {\n        frame: { x: 0, y: 0, width, height },\n        insets: { top: 0, left: 0, right: 0, bottom: 0 },\n      }\n    : initialWindowMetrics;\n\nexport default function SafeAreaProviderCompat({ children, style }: Props) {\n  return (\n    <SafeAreaInsetsContext.Consumer>\n      {(insets) => {\n        if (insets) {\n          // If we already have insets, don't wrap the stack in another safe area provider\n          // This avoids an issue with updates at the cost of potentially incorrect values\n          // https://github.com/react-navigation/react-navigation/issues/174\n          return <View style={[styles.container, style]}>{children}</View>;\n        }\n\n        return (\n          <SafeAreaProvider initialMetrics={initialMetrics} style={style}>\n            {children}\n          </SafeAreaProvider>\n        );\n      }}\n    </SafeAreaInsetsContext.Consumer>\n  );\n}\n\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}