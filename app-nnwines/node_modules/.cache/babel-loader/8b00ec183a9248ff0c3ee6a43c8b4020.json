{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport PreventRemoveContext from './PreventRemoveContext';\n/**\n * Util function to transform map of prevented routes to a simpler object.\n */\n\nconst transformPreventedRoutes = preventedRoutesMap => {\n  const preventedRoutesToTransform = [...preventedRoutesMap.values()];\n  const preventedRoutes = preventedRoutesToTransform.reduce((acc, _ref) => {\n    var _acc$routeKey;\n\n    let {\n      routeKey,\n      preventRemove\n    } = _ref;\n    acc[routeKey] = {\n      preventRemove: ((_acc$routeKey = acc[routeKey]) === null || _acc$routeKey === void 0 ? void 0 : _acc$routeKey.preventRemove) || preventRemove\n    };\n    return acc;\n  }, {});\n  return preventedRoutes;\n};\n/**\n * Component used for managing which routes have to be prevented from removal in native-stack.\n */\n\n\nexport default function PreventRemoveProvider(_ref2) {\n  let {\n    children\n  } = _ref2;\n  const [parentId] = React.useState(() => nanoid());\n  const [preventedRoutesMap, setPreventedRoutesMap] = React.useState(new Map());\n  const navigation = React.useContext(NavigationHelpersContext);\n  const route = React.useContext(NavigationRouteContext);\n  const preventRemoveContextValue = React.useContext(PreventRemoveContext); // take `setPreventRemove` from parent context - if exist it means we're in a nested context\n\n  const setParentPrevented = preventRemoveContextValue === null || preventRemoveContextValue === void 0 ? void 0 : preventRemoveContextValue.setPreventRemove;\n  const setPreventRemove = useLatestCallback((id, routeKey, preventRemove) => {\n    if (preventRemove && (navigation == null || navigation !== null && navigation !== void 0 && navigation.getState().routes.every(route => route.key !== routeKey))) {\n      throw new Error(`Couldn't find a route with the key ${routeKey}. Is your component inside NavigationContent?`);\n    }\n\n    setPreventedRoutesMap(prevPrevented => {\n      var _prevPrevented$get, _prevPrevented$get2; // values haven't changed - do nothing\n\n\n      if (routeKey === ((_prevPrevented$get = prevPrevented.get(id)) === null || _prevPrevented$get === void 0 ? void 0 : _prevPrevented$get.routeKey) && preventRemove === ((_prevPrevented$get2 = prevPrevented.get(id)) === null || _prevPrevented$get2 === void 0 ? void 0 : _prevPrevented$get2.preventRemove)) {\n        return prevPrevented;\n      }\n\n      const nextPrevented = new Map(prevPrevented);\n\n      if (preventRemove) {\n        nextPrevented.set(id, {\n          routeKey,\n          preventRemove\n        });\n      } else {\n        nextPrevented.delete(id);\n      }\n\n      return nextPrevented;\n    });\n  });\n  const isPrevented = [...preventedRoutesMap.values()].some(_ref3 => {\n    let {\n      preventRemove\n    } = _ref3;\n    return preventRemove;\n  });\n  React.useEffect(() => {\n    if ((route === null || route === void 0 ? void 0 : route.key) !== undefined && setParentPrevented !== undefined) {\n      // when route is defined (and setParentPrevented) it means we're in a nested stack\n      // route.key then will be the route key of parent\n      setParentPrevented(parentId, route.key, isPrevented);\n      return () => {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n\n    return;\n  }, [parentId, isPrevented, route === null || route === void 0 ? void 0 : route.key, setParentPrevented]);\n  const value = React.useMemo(() => ({\n    setPreventRemove,\n    preventedRoutes: transformPreventedRoutes(preventedRoutesMap)\n  }), [setPreventRemove, preventedRoutesMap]);\n  return /*#__PURE__*/React.createElement(PreventRemoveContext.Provider, {\n    value: value\n  }, children);\n}","map":{"version":3,"mappings":"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","names":["nanoid","React","useLatestCallback","NavigationHelpersContext","NavigationRouteContext","PreventRemoveContext","transformPreventedRoutes","preventedRoutesMap","preventedRoutesToTransform","values","preventedRoutes","reduce","acc","routeKey","preventRemove","_ref","PreventRemoveProvider","children","_ref2","parentId","useState","setPreventedRoutesMap","Map","navigation","useContext","route","preventRemoveContextValue","setParentPrevented","setPreventRemove","id","getState","routes","every","key","Error","prevPrevented","get","_prevPrevented$get","_prevPrevented$get2","nextPrevented","set","delete","isPrevented","some","_ref3","useEffect","undefined","value","useMemo","Provider"],"sources":["C:\\Users\\mateo\\Desktop\\React\\react-test\\node_modules\\@react-navigation\\core\\lib\\module\\PreventRemoveProvider.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport PreventRemoveContext, { PreventedRoutes } from './PreventRemoveContext';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype PreventedRoutesMap = Map<\n  string,\n  {\n    routeKey: string;\n    preventRemove: boolean;\n  }\n>;\n\n/**\n * Util function to transform map of prevented routes to a simpler object.\n */\nconst transformPreventedRoutes = (\n  preventedRoutesMap: PreventedRoutesMap\n): PreventedRoutes => {\n  const preventedRoutesToTransform = [...preventedRoutesMap.values()];\n\n  const preventedRoutes = preventedRoutesToTransform.reduce<PreventedRoutes>(\n    (acc, { routeKey, preventRemove }) => {\n      acc[routeKey] = {\n        preventRemove: acc[routeKey]?.preventRemove || preventRemove,\n      };\n      return acc;\n    },\n    {}\n  );\n\n  return preventedRoutes;\n};\n\n/**\n * Component used for managing which routes have to be prevented from removal in native-stack.\n */\nexport default function PreventRemoveProvider({ children }: Props) {\n  const [parentId] = React.useState(() => nanoid());\n  const [preventedRoutesMap, setPreventedRoutesMap] =\n    React.useState<PreventedRoutesMap>(new Map());\n\n  const navigation = React.useContext(NavigationHelpersContext);\n  const route = React.useContext(NavigationRouteContext);\n\n  const preventRemoveContextValue = React.useContext(PreventRemoveContext);\n  // take `setPreventRemove` from parent context - if exist it means we're in a nested context\n  const setParentPrevented = preventRemoveContextValue?.setPreventRemove;\n\n  const setPreventRemove = useLatestCallback(\n    (id: string, routeKey: string, preventRemove: boolean): void => {\n      if (\n        preventRemove &&\n        (navigation == null ||\n          navigation\n            ?.getState()\n            .routes.every((route) => route.key !== routeKey))\n      ) {\n        throw new Error(\n          `Couldn't find a route with the key ${routeKey}. Is your component inside NavigationContent?`\n        );\n      }\n\n      setPreventedRoutesMap((prevPrevented) => {\n        // values haven't changed - do nothing\n        if (\n          routeKey === prevPrevented.get(id)?.routeKey &&\n          preventRemove === prevPrevented.get(id)?.preventRemove\n        ) {\n          return prevPrevented;\n        }\n\n        const nextPrevented = new Map(prevPrevented);\n\n        if (preventRemove) {\n          nextPrevented.set(id, {\n            routeKey,\n            preventRemove,\n          });\n        } else {\n          nextPrevented.delete(id);\n        }\n\n        return nextPrevented;\n      });\n    }\n  );\n\n  const isPrevented = [...preventedRoutesMap.values()].some(\n    ({ preventRemove }) => preventRemove\n  );\n\n  React.useEffect(() => {\n    if (route?.key !== undefined && setParentPrevented !== undefined) {\n      // when route is defined (and setParentPrevented) it means we're in a nested stack\n      // route.key then will be the route key of parent\n      setParentPrevented(parentId, route.key, isPrevented);\n      return () => {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n\n    return;\n  }, [parentId, isPrevented, route?.key, setParentPrevented]);\n\n  const value = React.useMemo(\n    () => ({\n      setPreventRemove,\n      preventedRoutes: transformPreventedRoutes(preventedRoutesMap),\n    }),\n    [setPreventRemove, preventedRoutesMap]\n  );\n\n  return (\n    <PreventRemoveContext.Provider value={value}>\n      {children}\n    </PreventRemoveContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}