{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport SceneView from './SceneView';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\n\nexport default function useDescriptors(_ref) {\n  let {\n    state,\n    screens,\n    navigation,\n    screenOptions,\n    defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    addListener,\n    addKeyedListener,\n    onRouteFocus,\n    router,\n    emitter\n  } = _ref;\n  const [options, setOptions] = React.useState({});\n  const {\n    onDispatchAction,\n    onOptionsChange,\n    stackRef\n  } = React.useContext(NavigationBuilderContext);\n  const context = React.useMemo(() => ({\n    navigation,\n    onAction,\n    addListener,\n    addKeyedListener,\n    onRouteFocus,\n    onDispatchAction,\n    onOptionsChange,\n    stackRef\n  }), [navigation, onAction, addListener, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange, stackRef]);\n  const navigations = useNavigationCache({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter\n  });\n  const routes = useRouteCache(state.routes);\n  return routes.reduce((acc, route, i) => {\n    const config = screens[route.name];\n    const screen = config.props;\n    const navigation = navigations[route.key];\n    const optionsList = [// The default `screenOptions` passed to the navigator\n    screenOptions, // The `screenOptions` props passed to `Group` elements\n    ...(config.options ? config.options.filter(Boolean) : []), // The `options` prop passed to `Screen` elements,\n    screen.options, // The options set via `navigation.setOptions`\n    options[route.key]];\n    const customOptions = optionsList.reduce((acc, curr) => Object.assign(acc, typeof curr !== 'function' ? curr : curr({\n      route,\n      navigation\n    })), {});\n    const mergedOptions = { ...(typeof defaultScreenOptions === 'function' ? // @ts-expect-error: ts gives incorrect error here\n      defaultScreenOptions({\n        route,\n        navigation,\n        options: customOptions\n      }) : defaultScreenOptions),\n      ...customOptions\n    };\n\n    const clearOptions = () => setOptions(o => {\n      if (route.key in o) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const {\n          [route.key]: _,\n          ...rest\n        } = o;\n        return rest;\n      }\n\n      return o;\n    });\n\n    acc[route.key] = {\n      route,\n      // @ts-expect-error: it's missing action helpers, fix later\n      navigation,\n\n      render() {\n        return /*#__PURE__*/React.createElement(NavigationBuilderContext.Provider, {\n          key: route.key,\n          value: context\n        }, /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n          value: navigation\n        }, /*#__PURE__*/React.createElement(NavigationRouteContext.Provider, {\n          value: route\n        }, /*#__PURE__*/React.createElement(SceneView, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          routeState: state.routes[i].state,\n          getState: getState,\n          setState: setState,\n          options: mergedOptions,\n          clearOptions: clearOptions\n        }))));\n      },\n\n      options: mergedOptions\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"mappings":"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","names":["React","NavigationBuilderContext","NavigationContext","NavigationRouteContext","SceneView","useNavigationCache","useRouteCache","useDescriptors","state","screens","navigation","screenOptions","defaultScreenOptions","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","_ref","options","setOptions","useState","onDispatchAction","onOptionsChange","stackRef","useContext","context","useMemo","navigations","routes","reduce","acc","route","i","config","name","screen","props","key","optionsList","filter","Boolean","customOptions","curr","Object","assign","mergedOptions","clearOptions","o","_","rest","render","Provider","value","routeState"],"sources":["C:\\Users\\mateo\\Desktop\\React\\react-test\\node_modules\\@react-navigation\\core\\lib\\module\\useDescriptors.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  AddKeyedListener,\n  AddListener,\n} from './NavigationBuilderContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport SceneView from './SceneView';\nimport type {\n  Descriptor,\n  EventMapBase,\n  NavigationHelpers,\n  NavigationProp,\n  RouteConfig,\n  RouteProp,\n} from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\n\nexport type ScreenConfigWithParent<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  keys: (string | undefined)[];\n  options: (ScreenOptionsOrCallback<ScreenOptions> | undefined)[] | undefined;\n  props: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n};\n\ntype ScreenOptionsOrCallback<ScreenOptions extends {}> =\n  | ScreenOptions\n  | ((props: {\n      route: RouteProp<ParamListBase, string>;\n      navigation: any;\n    }) => ScreenOptions);\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?: ScreenOptionsOrCallback<ScreenOptions>;\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange, stackRef } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions, EventMap>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<\n      string,\n      Descriptor<\n        ScreenOptions,\n        NavigationProp<\n          ParamListBase,\n          string,\n          string | undefined,\n          State,\n          ScreenOptions,\n          EventMap\n        > &\n          ActionHelpers,\n        RouteProp<ParamListBase>\n      >\n    >\n  >((acc, route, i) => {\n    const config = screens[route.name];\n    const screen = config.props;\n    const navigation = navigations[route.key];\n\n    const optionsList = [\n      // The default `screenOptions` passed to the navigator\n      screenOptions,\n      // The `screenOptions` props passed to `Group` elements\n      ...((config.options\n        ? config.options.filter(Boolean)\n        : []) as ScreenOptionsOrCallback<ScreenOptions>[]),\n      // The `options` prop passed to `Screen` elements,\n      screen.options,\n      // The options set via `navigation.setOptions`\n      options[route.key],\n    ];\n\n    const customOptions = optionsList.reduce<ScreenOptions>(\n      (acc, curr) =>\n        Object.assign(\n          acc,\n          typeof curr !== 'function' ? curr : curr({ route, navigation })\n        ),\n      {} as ScreenOptions\n    );\n\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function'\n        ? // @ts-expect-error: ts gives incorrect error here\n          defaultScreenOptions({\n            route,\n            navigation,\n            options: customOptions,\n          })\n        : defaultScreenOptions),\n      ...customOptions,\n    };\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    acc[route.key] = {\n      route,\n      // @ts-expect-error: it's missing action helpers, fix later\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={mergedOptions}\n                  clearOptions={clearOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: mergedOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}