{"ast":null,"code":"import * as React from 'react';\nconst UNINTIALIZED_STATE = {};\n/**\n * This is definitely not compatible with concurrent mode, but we don't have a solution for sync state yet.\n */\n\nexport default function useSyncState(initialState) {\n  const stateRef = React.useRef(UNINTIALIZED_STATE);\n  const isSchedulingRef = React.useRef(false);\n  const isMountedRef = React.useRef(true);\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current = // @ts-expect-error: initialState is a function, but TypeScript doesn't think so\n    typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  const [trackingState, setTrackingState] = React.useState(stateRef.current);\n  const getState = React.useCallback(() => stateRef.current, []);\n  const setState = React.useCallback(state => {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n  const scheduleUpdate = React.useCallback(callback => {\n    isSchedulingRef.current = true;\n\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n  const flushUpdates = React.useCallback(() => {\n    if (!isMountedRef.current) {\n      return;\n    } // Make sure that the tracking state is up-to-date.\n    // We call it unconditionally, but React should skip the update if state is unchanged.\n\n\n    setTrackingState(stateRef.current);\n  }, []); // If we're rendering and the tracking state is out of date, update it immediately\n  // This will make sure that our updates are applied as early as possible.\n\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n\n  const state = stateRef.current;\n  React.useDebugValue(state);\n  return [state, getState, setState, scheduleUpdate, flushUpdates];\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,MAAMC,kBAAkB,GAAG,EAA3B;AAEA;AACA;AACA;;AACA,eAAe,SAASC,YAAT,CAAyBC,YAAzB,EAAuD;EACpE,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAANL,CAAgBC,kBAAhBD,CAAjB;EACA,MAAMM,eAAe,GAAGN,KAAK,CAACK,MAANL,CAAa,KAAbA,CAAxB;EACA,MAAMO,YAAY,GAAGP,KAAK,CAACK,MAANL,CAAa,IAAbA,CAArB;EAEAA,KAAK,CAACQ,SAANR,CAAgB,MAAM;IACpBO,YAAY,CAACE,OAAbF,GAAuB,IAAvBA;IAEA,OAAO,MAAM;MACXA,YAAY,CAACE,OAAbF,GAAuB,KAAvBA;IADF;EAHF,GAMG,EANHP;;EAQA,IAAII,QAAQ,CAACK,OAATL,KAAqBH,kBAAzB,EAA6C;IAC3CG,QAAQ,CAACK,OAATL,GACE;IACA,OAAOD,YAAP,KAAwB,UAAxB,GAAqCA,YAAY,EAAjD,GAAsDA,YAFxDC;EAGD;;EAED,MAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCX,KAAK,CAACY,QAANZ,CAAeI,QAAQ,CAACK,OAAxBT,CAA1C;EAEA,MAAMa,QAAQ,GAAGb,KAAK,CAACc,WAANd,CAAkB,MAAMI,QAAQ,CAACK,OAAjCT,EAA0C,EAA1CA,CAAjB;EAEA,MAAMe,QAAQ,GAAGf,KAAK,CAACc,WAANd,CAAmBgB,KAAD,IAAc;IAC/C,IAAIA,KAAK,KAAKZ,QAAQ,CAACK,OAAnBO,IAA8B,CAACT,YAAY,CAACE,OAAhD,EAAyD;MACvD;IACD;;IAEDL,QAAQ,CAACK,OAATL,GAAmBY,KAAnBZ;;IAEA,IAAI,CAACE,eAAe,CAACG,OAArB,EAA8B;MAC5BE,gBAAgB,CAACK,KAAD,CAAhBL;IACD;EATc,GAUd,EAVcX,CAAjB;EAYA,MAAMiB,cAAc,GAAGjB,KAAK,CAACc,WAANd,CAAmBkB,QAAD,IAA0B;IACjEZ,eAAe,CAACG,OAAhBH,GAA0B,IAA1BA;;IAEA,IAAI;MACFY,QAAQ;IADV,UAEU;MACRZ,eAAe,CAACG,OAAhBH,GAA0B,KAA1BA;IACD;EAPoB,GAQpB,EARoBN,CAAvB;EAUA,MAAMmB,YAAY,GAAGnB,KAAK,CAACc,WAANd,CAAkB,MAAM;IAC3C,IAAI,CAACO,YAAY,CAACE,OAAlB,EAA2B;MACzB;IAFyC,EAK3C;IACA;;;IACAE,gBAAgB,CAACP,QAAQ,CAACK,OAAV,CAAhBE;EAPmB,GAQlB,EARkBX,CAArB,CA7CoE,CAuDpE;EACA;;EACA,IAAIU,aAAa,KAAKN,QAAQ,CAACK,OAA/B,EAAwC;IACtCE,gBAAgB,CAACP,QAAQ,CAACK,OAAV,CAAhBE;EACD;;EAED,MAAMK,KAAK,GAAGZ,QAAQ,CAACK,OAAvB;EAEAT,KAAK,CAACoB,aAANpB,CAAoBgB,KAApBhB;EAEA,OAAO,CAACgB,KAAD,EAAQH,QAAR,EAAkBE,QAAlB,EAA4BE,cAA5B,EAA4CE,YAA5C,CAAP;AACD","names":["React","UNINTIALIZED_STATE","useSyncState","initialState","stateRef","useRef","isSchedulingRef","isMountedRef","useEffect","current","trackingState","setTrackingState","useState","getState","useCallback","setState","state","scheduleUpdate","callback","flushUpdates","useDebugValue"],"sources":["C:\\Users\\mateo\\Desktop\\React\\react-test\\node_modules\\@react-navigation\\core\\lib\\module\\useSyncState.tsx"],"sourcesContent":["import * as React from 'react';\n\nconst UNINTIALIZED_STATE = {};\n\n/**\n * This is definitely not compatible with concurrent mode, but we don't have a solution for sync state yet.\n */\nexport default function useSyncState<T>(initialState?: (() => T) | T) {\n  const stateRef = React.useRef<T>(UNINTIALIZED_STATE as any);\n  const isSchedulingRef = React.useRef(false);\n  const isMountedRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isMountedRef.current = true;\n\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current =\n      // @ts-expect-error: initialState is a function, but TypeScript doesn't think so\n      typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  const [trackingState, setTrackingState] = React.useState(stateRef.current);\n\n  const getState = React.useCallback(() => stateRef.current, []);\n\n  const setState = React.useCallback((state: T) => {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n\n  const scheduleUpdate = React.useCallback((callback: () => void) => {\n    isSchedulingRef.current = true;\n\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n\n  const flushUpdates = React.useCallback(() => {\n    if (!isMountedRef.current) {\n      return;\n    }\n\n    // Make sure that the tracking state is up-to-date.\n    // We call it unconditionally, but React should skip the update if state is unchanged.\n    setTrackingState(stateRef.current);\n  }, []);\n\n  // If we're rendering and the tracking state is out of date, update it immediately\n  // This will make sure that our updates are applied as early as possible.\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n\n  const state = stateRef.current;\n\n  React.useDebugValue(state);\n\n  return [state, getState, setState, scheduleUpdate, flushUpdates] as const;\n}\n"]},"metadata":{},"sourceType":"module"}