{"ast":null,"code":"/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport normalizeValueWithProperty from './normalizeValueWithProperty';\nimport canUseDOM from '../../../modules/canUseDom';\n/**\n * The browser implements the CSS cascade, where the order of properties is a\n * factor in determining which styles to paint. React Native is different. It\n * gives giving precedence to the more specific style property. For example,\n * the value of `paddingTop` takes precedence over that of `padding`.\n *\n * This module creates mutally exclusive style declarations by expanding all of\n * React Native's supported shortform properties (e.g. `padding`) to their\n * longfrom equivalents.\n */\n\nvar emptyObject = {};\nvar supportsCSS3TextDecoration = !canUseDOM || window.CSS != null && window.CSS.supports != null && (window.CSS.supports('text-decoration-line', 'none') || window.CSS.supports('-webkit-text-decoration-line', 'none'));\nvar ignoredProps = {\n  elevation: true,\n  overlayColor: true,\n  resizeMode: true,\n  tintColor: true\n};\nvar MONOSPACE_FONT_STACK = 'monospace,monospace';\nvar SYSTEM_FONT_STACK = '-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif';\nvar STYLE_SHORT_FORM_EXPANSIONS = {\n  borderColor: ['borderTopColor', 'borderRightColor', 'borderBottomColor', 'borderLeftColor'],\n  borderRadius: ['borderTopLeftRadius', 'borderTopRightRadius', 'borderBottomRightRadius', 'borderBottomLeftRadius'],\n  borderStyle: ['borderTopStyle', 'borderRightStyle', 'borderBottomStyle', 'borderLeftStyle'],\n  borderWidth: ['borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth'],\n  marginHorizontal: ['marginRight', 'marginLeft'],\n  marginVertical: ['marginTop', 'marginBottom'],\n  overflow: ['overflowX', 'overflowY'],\n  overscrollBehavior: ['overscrollBehaviorX', 'overscrollBehaviorY'],\n  paddingHorizontal: ['paddingRight', 'paddingLeft'],\n  paddingVertical: ['paddingTop', 'paddingBottom']\n};\n/**\n * Transform\n */\n// { scale: 2 } => 'scale(2)'\n// { translateX: 20 } => 'translateX(20px)'\n// { matrix: [1,2,3,4,5,6] } => 'matrix(1,2,3,4,5,6)'\n\nvar mapTransform = function mapTransform(transform) {\n  var type = Object.keys(transform)[0];\n  var value = transform[type];\n\n  if (type === 'matrix' || type === 'matrix3d') {\n    return type + \"(\" + value.join(',') + \")\";\n  } else {\n    var normalizedValue = normalizeValueWithProperty(value, type);\n    return type + \"(\" + normalizedValue + \")\";\n  }\n};\n\nexport var createTransformValue = function createTransformValue(style) {\n  var transform = style.transform;\n\n  if (Array.isArray(style.transform)) {\n    transform = style.transform.map(mapTransform).join(' ');\n  }\n\n  return transform;\n};\n/**\n * Reducer\n */\n\nvar createReactDOMStyle = function createReactDOMStyle(style, isInline) {\n  if (!style) {\n    return emptyObject;\n  }\n\n  var resolvedStyle = {};\n\n  for (var prop in style) {\n    var value = style[prop];\n\n    if ( // Ignore everything with a null value\n    value == null || // Ignore some React Native styles\n    ignoredProps[prop]) {\n      continue;\n    }\n\n    if (prop === 'aspectRatio') {\n      resolvedStyle[prop] = value.toString();\n    } else if (prop === 'backgroundClip') {\n      // TODO: remove once this issue is fixed\n      // https://github.com/rofrischmann/inline-style-prefixer/issues/159\n      if (value === 'text') {\n        resolvedStyle.backgroundClip = value;\n        resolvedStyle.WebkitBackgroundClip = value;\n      }\n    } else if (prop === 'flex') {\n      if (value === -1) {\n        resolvedStyle.flexGrow = 0;\n        resolvedStyle.flexShrink = 1;\n        resolvedStyle.flexBasis = 'auto';\n      } else {\n        resolvedStyle.flex = value;\n      }\n    } else if (prop === 'font') {\n      resolvedStyle[prop] = value.replace('System', SYSTEM_FONT_STACK);\n    } else if (prop === 'fontFamily') {\n      if (value.indexOf('System') > -1) {\n        var stack = value.split(/,\\s*/);\n        stack[stack.indexOf('System')] = SYSTEM_FONT_STACK;\n        resolvedStyle[prop] = stack.join(',');\n      } else if (value === 'monospace') {\n        resolvedStyle[prop] = MONOSPACE_FONT_STACK;\n      } else {\n        resolvedStyle[prop] = value;\n      }\n    } else if (prop === 'fontVariant') {\n      if (Array.isArray(value) && value.length > 0) {\n        resolvedStyle.fontVariant = value.join(' ');\n      }\n    } else if (prop === 'textAlignVertical') {\n      resolvedStyle.verticalAlign = value === 'center' ? 'middle' : value;\n    } else if (prop === 'textDecorationLine') {\n      // use 'text-decoration' for browsers that only support CSS2\n      // text-decoration (e.g., IE, Edge)\n      if (!supportsCSS3TextDecoration) {\n        resolvedStyle.textDecoration = value;\n      } else {\n        resolvedStyle.textDecorationLine = value;\n      }\n    } else if (prop === 'transform' || prop === 'transformMatrix') {\n      resolvedStyle.transform = createTransformValue(style);\n    } else if (prop === 'writingDirection') {\n      resolvedStyle.direction = value;\n    } else {\n      (function () {\n        var value = normalizeValueWithProperty(style[prop], prop);\n        var longFormProperties = STYLE_SHORT_FORM_EXPANSIONS[prop];\n\n        if (isInline && prop === 'margin') {\n          if (style.marginHorizontal == null) {\n            resolvedStyle.marginLeft = value;\n            resolvedStyle.marginRight = value;\n          }\n\n          if (style.marginVertical == null) {\n            resolvedStyle.marginTop = value;\n            resolvedStyle.marginBottom = value;\n          }\n        } else if (isInline && prop === 'padding') {\n          if (style.paddingHorizontal == null) {\n            resolvedStyle.paddingLeft = value;\n            resolvedStyle.paddingRight = value;\n          }\n\n          if (style.paddingVertical == null) {\n            resolvedStyle.paddingTop = value;\n            resolvedStyle.paddingBottom = value;\n          }\n        } else if (longFormProperties) {\n          longFormProperties.forEach(function (longForm, i) {\n            // The value of any longform property in the original styles takes\n            // precedence over the shortform's value.\n            if (style[longForm] == null) {\n              resolvedStyle[longForm] = value;\n            }\n          });\n        } else {\n          resolvedStyle[prop] = Array.isArray(value) ? value.join(',') : value;\n        }\n      })();\n    }\n  }\n\n  return resolvedStyle;\n};\n\nexport default createReactDOMStyle;","map":null,"metadata":{},"sourceType":"module"}