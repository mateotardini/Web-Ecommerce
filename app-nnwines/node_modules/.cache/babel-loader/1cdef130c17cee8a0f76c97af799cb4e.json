{"ast":null,"code":"/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport requestIdleCallback, { cancelIdleCallback } from '../../modules/requestIdleCallback';\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n\n  /**\n   * Schedule a function to run after all interactions have completed.\n   */\n  runAfterInteractions: function runAfterInteractions(task) {\n    var handle;\n    var promise = new Promise(function (resolve) {\n      handle = requestIdleCallback(function () {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: function cancel() {\n        cancelIdleCallback(handle);\n      }\n    };\n  },\n\n  /**\n   * Notify manager that an interaction has started.\n   */\n  createInteractionHandle: function createInteractionHandle() {\n    return 1;\n  },\n\n  /**\n   * Notify manager that an interaction has completed.\n   */\n  clearInteractionHandle: function clearInteractionHandle(handle) {\n    invariant(!!handle, 'Must provide a handle to clear.');\n  },\n  addListener: function addListener() {}\n};\nexport default InteractionManager;","map":null,"metadata":{},"sourceType":"module"}