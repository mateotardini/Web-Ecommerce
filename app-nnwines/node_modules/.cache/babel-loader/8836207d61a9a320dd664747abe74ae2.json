{"ast":null,"code":"import { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport PreventRemoveProvider from './PreventRemoveProvider';\nimport Screen from './Screen';\nimport { PrivateValueStore } from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate'; // This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\n\nPrivateValueStore;\n\nconst isValidKey = key => key === undefined || typeof key === 'string' && key !== '';\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\n\n\nconst getRouteConfigsFromChildren = (children, groupKey, groupOptions) => {\n  const configs = React.Children.toArray(children).reduce((acc, child) => {\n    var _child$type, _child$props;\n\n    if ( /*#__PURE__*/React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the screen '${child.props.name}'. It must be a non-empty string or 'undefined'.`);\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the group. It must be a non-empty string or 'undefined'.`);\n        } // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n\n\n        acc.push(...getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== Group ? groupOptions : groupOptions != null ? [...groupOptions, child.props.screenOptions] : [child.props.screenOptions]));\n        return acc;\n      }\n    }\n\n    throw new Error(`A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n    /*#__PURE__*/\n    React.isValidElement(child) ? `'${typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name}'${(_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? ` for the screen '${child.props.name}'` : ''}` : typeof child === 'object' ? JSON.stringify(child) : `'${String(child)}'`}). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`);\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(config => {\n      const {\n        name,\n        children,\n        component,\n        getComponent\n      } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(`Got an invalid name (${JSON.stringify(name)}) for the screen. It must be a non-empty string.`);\n      }\n\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(`Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`);\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(`Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`);\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(`Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`);\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(`Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`);\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(`Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`);\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(`Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`);\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(`Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`);\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(`Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`);\n          }\n        }\n      } else {\n        throw new Error(`Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`);\n      }\n    });\n  }\n\n  return configs;\n};\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\n\n\nexport default function useNavigationBuilder(createRouter, options) {\n  const navigatorKey = useRegisterNavigator();\n  const route = React.useContext(NavigationRouteContext);\n  const {\n    children,\n    screenListeners,\n    ...rest\n  } = options;\n  const {\n    current: router\n  } = React.useRef(createRouter({ ...rest,\n    ...(route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n      initialRouteName: route.params.screen\n    } : null)\n  }));\n  const routeConfigs = getRouteConfigsFromChildren(children);\n  const screens = routeConfigs.reduce((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(`A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`);\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n  const routeNames = routeConfigs.map(config => config.props.name);\n  const routeKeyList = routeNames.reduce((acc, curr) => {\n    acc[curr] = screens[curr].keys.map(key => key !== null && key !== void 0 ? key : '').join(':');\n    return acc;\n  }, {});\n  const routeParamList = routeNames.reduce((acc, curr) => {\n    const {\n      initialParams\n    } = screens[curr].props;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  const routeGetIdList = routeNames.reduce((acc, curr) => Object.assign(acc, {\n    [curr]: screens[curr].props.getId\n  }), {});\n\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n\n  const isStateValid = React.useCallback(state => state.type === undefined || state.type === router.type, [router.type]);\n  const isStateInitialized = React.useCallback(state => state !== undefined && state.stale === false && isStateValid(state), [isStateValid]);\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial\n  } = React.useContext(NavigationStateContext);\n  const stateCleanedUp = React.useRef(false);\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  const setState = React.useCallback(state => {\n    if (stateCleanedUp.current) {\n      // State might have been already cleaned up due to unmount\n      // We do not want to expose API allowing to override this\n      // This would lead to old data preservation on main navigator unmount\n      return;\n    }\n\n    setCurrentState(state);\n  }, [setCurrentState]);\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    var _route$params4;\n\n    const initialRouteParamList = routeNames.reduce((acc, curr) => {\n      var _route$params, _route$params2, _route$params3;\n\n      const {\n        initialParams\n      } = screens[curr].props;\n      const initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n      acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? { ...initialParams,\n        ...initialParamsFromParams\n      } : undefined;\n      return acc;\n    }, {}); // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n\n    if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n      return [router.getInitialState({\n        routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList\n      }), true];\n    } else {\n      var _route$params$state, _route$params5;\n\n      return [router.getRehydratedState((_route$params$state = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) !== null && _route$params$state !== void 0 ? _route$params$state : currentState, {\n        routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList\n      }), false];\n    } // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [currentState, router, isStateValid]);\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n  let state = // If the state isn't initialized, or stale, use the state we initialized instead\n  // The state won't update until there's a change needed in the state we have initalized locally\n  // So it'll be `undefined` or stale until the first navigation event happens\n  isStateInitialized(currentState) ? currentState : initializedState;\n  let nextState = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames) || !isRecordEqual(routeKeyList, previousRouteKeyList)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(name => previousRouteKeyList.hasOwnProperty(name) && routeKeyList[name] !== previousRouteKeyList[name])\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n\n  if (route !== null && route !== void 0 && route.params) {\n    const previousParams = previousNestedParamsRef.current;\n    let action;\n\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    } // The update should be limited to current navigator only, so we call the router manually\n\n\n    const updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  }); // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n\n  state = nextState;\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n\n  const initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  const getState = React.useCallback(() => {\n    const currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  const emitter = useEventEmitter(e => {\n    let routeNames = [];\n    let route;\n\n    if (e.target) {\n      var _route;\n\n      route = state.routes.find(route => route.key === e.target);\n\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(...Object.keys(screens).filter(name => {\n        var _route2;\n\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      }));\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n    const listeners = [].concat( // Get an array of listeners for all screens + common listeners on navigator\n    ...[screenListeners, ...routeNames.map(name => {\n      const {\n        listeners\n      } = screens[name].props;\n      return listeners;\n    })].map(listeners => {\n      const map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(type => type === e.type).map(type => map === null || map === void 0 ? void 0 : map[type]) : undefined;\n    })) // We don't want same listener to be called multiple times for same event\n    // So we remove any duplicate functions from the array\n    .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n    listeners.forEach(listener => listener === null || listener === void 0 ? void 0 : listener(e));\n  });\n  useFocusEvents({\n    state,\n    emitter\n  });\n  React.useEffect(() => {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state\n      }\n    });\n  }, [emitter, state]);\n  const {\n    listeners: childListeners,\n    addListener\n  } = useChildListeners();\n  const {\n    keyedListeners,\n    addKeyedListener\n  } = useKeyedChildListeners();\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    },\n    emitter\n  });\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState,\n    setState\n  });\n  const navigation = useNavigationHelpers({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router\n  });\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus\n  });\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState\n  });\n  const descriptors = useDescriptors({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter\n  });\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors\n  });\n  const NavigationContent = useComponent(children => /*#__PURE__*/React.createElement(NavigationHelpersContext.Provider, {\n    value: navigation\n  }, /*#__PURE__*/React.createElement(PreventRemoveProvider, null, children)));\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent\n  };\n}","map":{"version":3,"mappings":"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","names":["CommonActions","React","isValidElementType","Group","isArrayEqual","isRecordEqual","NavigationHelpersContext","NavigationRouteContext","NavigationStateContext","PreventRemoveProvider","Screen","PrivateValueStore","useChildListeners","useComponent","useCurrentRender","useDescriptors","useEventEmitter","useFocusedListenersChildrenAdapter","useFocusEvents","useKeyedChildListeners","useNavigationHelpers","useOnAction","useOnGetState","useOnRouteFocus","useRegisterNavigator","useScheduleUpdate","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","configs","Children","toArray","reduce","acc","child","isValidElement","type","props","navigationKey","Error","JSON","stringify","name","push","keys","options","Fragment","screenOptions","_child$type","String","process","env","NODE_ENV","forEach","config","component","getComponent","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","route","useContext","screenListeners","rest","current","router","useRef","params","state","initial","screen","initialRouteName","routeConfigs","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","Object","assign","getId","length","isStateValid","useCallback","isStateInitialized","stale","currentState","getState","getCurrentState","setState","setCurrentState","setKey","getKey","getIsInitial","stateCleanedUp","cleanUpState","initializedState","isFirstStateInitialization","useMemo","initialRouteParamList","initialParamsFromParams","getInitialState","getRehydratedState","_route$params5","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","getStateForRouteNamesChange","routeKeyChanges","filter","hasOwnProperty","previousNestedParamsRef","previousParams","action","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","setTimeout","initializedStateRef","emitter","e","target","routes","find","_route","index","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","childListeners","addListener","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","id","focusedListeners","focus","getStateListeners","defaultScreenOptions","NavigationContent","Provider","value"],"sources":["C:\\Users\\mateo\\Desktop\\React\\react-test\\node_modules\\@react-navigation\\core\\lib\\module\\useNavigationBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport PreventRemoveProvider from './PreventRemoveProvider';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n              ? [...groupOptions, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(\n        (name) =>\n          previousRouteKeyList.hasOwnProperty(name) &&\n          routeKeyList[name] !== previousRouteKeyList[name]\n      ),\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent((children: React.ReactNode) => (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <PreventRemoveProvider>{children}</PreventRemoveProvider>\n    </NavigationHelpersContext.Provider>\n  ));\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}