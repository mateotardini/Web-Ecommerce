{"ast":null,"code":"export default function getActionFromState(state, options) {\n  var _state$index, _normalizedConfig$scr; // Create a normalized configs object which will be easier to use\n\n\n  const normalizedConfig = options ? createNormalizedConfigItem(options) : {};\n  const routes = state.index != null ? state.routes.slice(0, state.index + 1) : state.routes;\n\n  if (routes.length === 0) {\n    return undefined;\n  }\n\n  if (!(routes.length === 1 && routes[0].key === undefined || routes.length === 2 && routes[0].key === undefined && routes[0].name === (normalizedConfig === null || normalizedConfig === void 0 ? void 0 : normalizedConfig.initialRouteName) && routes[1].key === undefined)) {\n    return {\n      type: 'RESET',\n      payload: state\n    };\n  }\n\n  const route = state.routes[(_state$index = state.index) !== null && _state$index !== void 0 ? _state$index : state.routes.length - 1];\n  let current = route === null || route === void 0 ? void 0 : route.state;\n  let config = normalizedConfig === null || normalizedConfig === void 0 ? void 0 : (_normalizedConfig$scr = normalizedConfig.screens) === null || _normalizedConfig$scr === void 0 ? void 0 : _normalizedConfig$scr[route === null || route === void 0 ? void 0 : route.name];\n  let params = { ...route.params\n  };\n  let payload = route ? {\n    name: route.name,\n    path: route.path,\n    params\n  } : undefined;\n\n  while (current) {\n    var _config, _config2, _config2$screens;\n\n    if (current.routes.length === 0) {\n      return undefined;\n    }\n\n    const routes = current.index != null ? current.routes.slice(0, current.index + 1) : current.routes;\n    const route = routes[routes.length - 1]; // Explicitly set to override existing value when merging params\n\n    Object.assign(params, {\n      initial: undefined,\n      screen: undefined,\n      params: undefined,\n      state: undefined\n    });\n\n    if (routes.length === 1 && routes[0].key === undefined) {\n      params.initial = true;\n      params.screen = route.name;\n    } else if (routes.length === 2 && routes[0].key === undefined && routes[0].name === ((_config = config) === null || _config === void 0 ? void 0 : _config.initialRouteName) && routes[1].key === undefined) {\n      params.initial = false;\n      params.screen = route.name;\n    } else {\n      params.state = current;\n      break;\n    }\n\n    if (route.state) {\n      params.params = { ...route.params\n      };\n      params = params.params;\n    } else {\n      params.path = route.path;\n      params.params = route.params;\n    }\n\n    current = route.state;\n    config = (_config2 = config) === null || _config2 === void 0 ? void 0 : (_config2$screens = _config2.screens) === null || _config2$screens === void 0 ? void 0 : _config2$screens[route.name];\n  }\n\n  if (!payload) {\n    return;\n  } // Try to construct payload for a `NAVIGATE` action from the state\n  // This lets us preserve the navigation state and not lose it\n\n\n  return {\n    type: 'NAVIGATE',\n    payload\n  };\n}\n\nconst createNormalizedConfigItem = config => typeof config === 'object' && config != null ? {\n  initialRouteName: config.initialRouteName,\n  screens: config.screens != null ? createNormalizedConfigs(config.screens) : undefined\n} : {};\n\nconst createNormalizedConfigs = options => Object.entries(options).reduce((acc, _ref) => {\n  let [k, v] = _ref;\n  acc[k] = createNormalizedConfigItem(v);\n  return acc;\n}, {});","map":{"version":3,"mappings":"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","names":["getActionFromState","state","options","normalizedConfig","createNormalizedConfigItem","routes","index","slice","length","undefined","key","name","initialRouteName","type","payload","route","current","config","screens","_normalizedConfig$scr","params","path","Object","assign","initial","screen","_config","_config2","_config2$screens","createNormalizedConfigs","entries","reduce","acc","k","v","_ref"],"sources":["C:\\Users\\mateo\\Desktop\\React\\react-test\\node_modules\\@react-navigation\\core\\lib\\module\\getActionFromState.tsx"],"sourcesContent":["import type {\n  CommonActions,\n  NavigationState,\n  ParamListBase,\n  PartialRoute,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\n\nimport type { NavigatorScreenParams, PathConfig, PathConfigMap } from './types';\n\ntype ConfigItem = {\n  initialRouteName?: string;\n  screens?: Record<string, ConfigItem>;\n};\n\ntype Options = {\n  initialRouteName?: string;\n  screens: PathConfigMap<object>;\n};\n\ntype NavigateAction<State extends NavigationState> = {\n  type: 'NAVIGATE';\n  payload: {\n    name: string;\n    params?: NavigatorScreenParams<State>;\n    path?: string;\n  };\n};\n\nexport default function getActionFromState(\n  state: PartialState<NavigationState>,\n  options?: Options\n): NavigateAction<NavigationState> | CommonActions.Action | undefined {\n  // Create a normalized configs object which will be easier to use\n  const normalizedConfig = options\n    ? createNormalizedConfigItem(options as PathConfig<object> | string)\n    : {};\n\n  const routes =\n    state.index != null ? state.routes.slice(0, state.index + 1) : state.routes;\n\n  if (routes.length === 0) {\n    return undefined;\n  }\n\n  if (\n    !(\n      (routes.length === 1 && routes[0].key === undefined) ||\n      (routes.length === 2 &&\n        routes[0].key === undefined &&\n        routes[0].name === normalizedConfig?.initialRouteName &&\n        routes[1].key === undefined)\n    )\n  ) {\n    return {\n      type: 'RESET',\n      payload: state,\n    };\n  }\n\n  const route = state.routes[state.index ?? state.routes.length - 1];\n\n  let current: PartialState<NavigationState> | undefined = route?.state;\n  let config: ConfigItem | undefined = normalizedConfig?.screens?.[route?.name];\n  let params = { ...route.params } as NavigatorScreenParams<\n    ParamListBase,\n    NavigationState\n  >;\n\n  let payload = route\n    ? { name: route.name, path: route.path, params }\n    : undefined;\n\n  while (current) {\n    if (current.routes.length === 0) {\n      return undefined;\n    }\n\n    const routes =\n      current.index != null\n        ? current.routes.slice(0, current.index + 1)\n        : current.routes;\n\n    const route: Route<string> | PartialRoute<Route<string>> =\n      routes[routes.length - 1];\n\n    // Explicitly set to override existing value when merging params\n    Object.assign(params, {\n      initial: undefined,\n      screen: undefined,\n      params: undefined,\n      state: undefined,\n    });\n\n    if (routes.length === 1 && routes[0].key === undefined) {\n      params.initial = true;\n      params.screen = route.name;\n    } else if (\n      routes.length === 2 &&\n      routes[0].key === undefined &&\n      routes[0].name === config?.initialRouteName &&\n      routes[1].key === undefined\n    ) {\n      params.initial = false;\n      params.screen = route.name;\n    } else {\n      params.state = current;\n      break;\n    }\n\n    if (route.state) {\n      params.params = { ...route.params };\n      params = params.params as NavigatorScreenParams<\n        ParamListBase,\n        NavigationState\n      >;\n    } else {\n      params.path = route.path;\n      params.params = route.params;\n    }\n\n    current = route.state;\n    config = config?.screens?.[route.name];\n  }\n\n  if (!payload) {\n    return;\n  }\n\n  // Try to construct payload for a `NAVIGATE` action from the state\n  // This lets us preserve the navigation state and not lose it\n  return {\n    type: 'NAVIGATE',\n    payload,\n  };\n}\n\nconst createNormalizedConfigItem = (config: PathConfig<object> | string) =>\n  typeof config === 'object' && config != null\n    ? {\n        initialRouteName: config.initialRouteName,\n        screens:\n          config.screens != null\n            ? createNormalizedConfigs(config.screens)\n            : undefined,\n      }\n    : {};\n\nconst createNormalizedConfigs = (options: PathConfigMap<object>) =>\n  Object.entries(options).reduce<Record<string, ConfigItem>>((acc, [k, v]) => {\n    acc[k] = createNormalizedConfigItem(v);\n    return acc;\n  }, {});\n"]},"metadata":{},"sourceType":"module"}