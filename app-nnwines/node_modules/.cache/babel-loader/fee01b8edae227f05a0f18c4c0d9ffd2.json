{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport useNavigation from './useNavigation';\nimport usePreventRemoveContext from './usePreventRemoveContext';\nimport useRoute from './useRoute';\n/**\n * Hook to prevent screen from being removed. Can be used to prevent users from leaving the screen.\n *\n * @param preventRemove Boolean indicating whether to prevent screen from being removed.\n * @param callback Function which is executed when screen was prevented from being removed.\n */\n\nexport default function usePreventRemove(preventRemove, callback) {\n  const [id] = React.useState(() => nanoid());\n  const navigation = useNavigation();\n  const {\n    key: routeKey\n  } = useRoute();\n  const {\n    setPreventRemove\n  } = usePreventRemoveContext();\n  React.useEffect(() => {\n    setPreventRemove(id, routeKey, preventRemove);\n    return () => {\n      setPreventRemove(id, routeKey, false);\n    };\n  }, [setPreventRemove, id, routeKey, preventRemove]);\n  const beforeRemoveListener = useLatestCallback(e => {\n    if (!preventRemove) {\n      return;\n    }\n\n    e.preventDefault();\n    callback({\n      data: e.data\n    });\n  });\n  React.useEffect(() => navigation === null || navigation === void 0 ? void 0 : navigation.addListener('beforeRemove', beforeRemoveListener), [navigation, beforeRemoveListener]);\n}","map":{"version":3,"mappings":"AACA,SAASA,MAAT,QAAuB,mBAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AAGA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,uBAAP,MAAoC,2BAApC;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,gBAAT,CACbC,aADa,EAEbC,QAFa,EAGb;EACA,MAAM,CAACC,EAAD,IAAOR,KAAK,CAACS,QAANT,CAAe,MAAMD,MAAM,EAA3BC,CAAb;EAEA,MAAMU,UAAU,GAAGR,aAAa,EAAhC;EACA,MAAM;IAAES,GAAG,EAAEC;EAAP,IAAoBR,QAAQ,EAAlC;EAEA,MAAM;IAAES;EAAF,IAAuBV,uBAAuB,EAApD;EAEAH,KAAK,CAACc,SAANd,CAAgB,MAAM;IACpBa,gBAAgB,CAACL,EAAD,EAAKI,QAAL,EAAeN,aAAf,CAAhBO;IACA,OAAO,MAAM;MACXA,gBAAgB,CAACL,EAAD,EAAKI,QAAL,EAAe,KAAf,CAAhBC;IADF;EAFF,GAKG,CAACA,gBAAD,EAAmBL,EAAnB,EAAuBI,QAAvB,EAAiCN,aAAjC,CALHN;EAOA,MAAMe,oBAAoB,GAAGd,iBAAiB,CAE3Ce,CAAD,IAAO;IACP,IAAI,CAACV,aAAL,EAAoB;MAClB;IACD;;IAEDU,CAAC,CAACC,cAAFD;IAEAT,QAAQ,CAAC;MAAEW,IAAI,EAAEF,CAAC,CAACE;IAAV,CAAD,CAARX;EAT4C,EAA9C;EAYAP,KAAK,CAACc,SAANd,CACE,MAAMU,UAAN,SAAMA,cAAN,WAAMA,GAAN,MAAMA,aAAU,CAAES,WAAZT,CAAwB,cAAxBA,EAAwCK,oBAAxCL,CADRV,EAEE,CAACU,UAAD,EAAaK,oBAAb,CAFFf;AAID","names":["nanoid","React","useLatestCallback","useNavigation","usePreventRemoveContext","useRoute","usePreventRemove","preventRemove","callback","id","useState","navigation","key","routeKey","setPreventRemove","useEffect","beforeRemoveListener","e","preventDefault","data","addListener"],"sources":["C:\\Users\\mateo\\Desktop\\React\\react-test\\node_modules\\@react-navigation\\core\\lib\\module\\usePreventRemove.tsx"],"sourcesContent":["import type { NavigationAction } from '@react-navigation/routers';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport type { EventListenerCallback, EventMapCore } from './types';\nimport useNavigation from './useNavigation';\nimport usePreventRemoveContext from './usePreventRemoveContext';\nimport useRoute from './useRoute';\n\n/**\n * Hook to prevent screen from being removed. Can be used to prevent users from leaving the screen.\n *\n * @param preventRemove Boolean indicating whether to prevent screen from being removed.\n * @param callback Function which is executed when screen was prevented from being removed.\n */\nexport default function usePreventRemove(\n  preventRemove: boolean,\n  callback: (options: { data: { action: NavigationAction } }) => void\n) {\n  const [id] = React.useState(() => nanoid());\n\n  const navigation = useNavigation();\n  const { key: routeKey } = useRoute();\n\n  const { setPreventRemove } = usePreventRemoveContext();\n\n  React.useEffect(() => {\n    setPreventRemove(id, routeKey, preventRemove);\n    return () => {\n      setPreventRemove(id, routeKey, false);\n    };\n  }, [setPreventRemove, id, routeKey, preventRemove]);\n\n  const beforeRemoveListener = useLatestCallback<\n    EventListenerCallback<EventMapCore<any>, 'beforeRemove'>\n  >((e) => {\n    if (!preventRemove) {\n      return;\n    }\n\n    e.preventDefault();\n\n    callback({ data: e.data });\n  });\n\n  React.useEffect(\n    () => navigation?.addListener('beforeRemove', beforeRemoveListener),\n    [navigation, beforeRemoveListener]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}