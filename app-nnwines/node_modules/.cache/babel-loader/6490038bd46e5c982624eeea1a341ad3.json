{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, Easing, Platform, Pressable } from 'react-native';\nconst AnimatedPressable = Animated.createAnimatedComponent(Pressable);\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_SUPPORTS_RIPPLE = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n/**\n * PlatformPressable provides an abstraction on top of Pressable to handle platform differences.\n */\n\nexport default function PlatformPressable(_ref) {\n  let {\n    onPressIn,\n    onPressOut,\n    android_ripple,\n    pressColor,\n    pressOpacity = 0.3,\n    style,\n    ...rest\n  } = _ref;\n  const {\n    dark\n  } = useTheme();\n  const [opacity] = React.useState(() => new Animated.Value(1));\n\n  const animateTo = (toValue, duration) => {\n    if (ANDROID_SUPPORTS_RIPPLE) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue,\n      duration,\n      easing: Easing.inOut(Easing.quad),\n      useNativeDriver: true\n    }).start();\n  };\n\n  const handlePressIn = e => {\n    animateTo(pressOpacity, 0);\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n  };\n\n  const handlePressOut = e => {\n    animateTo(1, 200);\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);\n  };\n\n  return /*#__PURE__*/React.createElement(AnimatedPressable, _extends({\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    android_ripple: ANDROID_SUPPORTS_RIPPLE ? {\n      color: pressColor !== undefined ? pressColor : dark ? 'rgba(255, 255, 255, .32)' : 'rgba(0, 0, 0, .32)',\n      ...android_ripple\n    } : undefined,\n    style: [{\n      opacity: !ANDROID_SUPPORTS_RIPPLE ? opacity : 1\n    }, style]\n  }, rest));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,0BAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SACEC,QADF,EAEEC,MAFF,EAIEC,QAJF,EAKEC,SALF,QASO,cATP;AAkBA,MAAMC,iBAAiB,GAAGJ,QAAQ,CAACK,uBAATL,CAAiCG,SAAjCH,CAA1B;AAEA,MAAMM,wBAAwB,GAAG,EAAjC;AACA,MAAMC,uBAAuB,GAC3BL,QAAQ,CAACM,EAATN,KAAgB,SAAhBA,IAA6BA,QAAQ,CAACO,OAATP,IAAoBI,wBADnD;AAGA;AACA;AACA;;AACA,eAAe,SAASI,iBAAT,OAQL;EAAA,IARgC;IACxCC,SADwC;IAExCC,UAFwC;IAGxCC,cAHwC;IAIxCC,UAJwC;IAKxCC,YAAY,GAAG,GALyB;IAMxCC,KANwC;IAOxC,GAAGC;EAPqC,IAQhCC;EACR,MAAM;IAAEC;EAAF,IAAWrB,QAAQ,EAAzB;EACA,MAAM,CAACsB,OAAD,IAAYrB,KAAK,CAACsB,QAANtB,CAAe,MAAM,IAAIC,QAAQ,CAACsB,KAAb,CAAmB,CAAnB,CAArBvB,CAAlB;;EAEA,MAAMwB,SAAS,GAAG,CAACC,OAAD,EAAkBC,QAAlB,KAAuC;IACvD,IAAIlB,uBAAJ,EAA6B;MAC3B;IACD;;IAEDP,QAAQ,CAAC0B,MAAT1B,CAAgBoB,OAAhBpB,EAAyB;MACvBwB,OADuB;MAEvBC,QAFuB;MAGvBE,MAAM,EAAE1B,MAAM,CAAC2B,KAAP3B,CAAaA,MAAM,CAAC4B,IAApB5B,CAHe;MAIvB6B,eAAe,EAAE;IAJM,CAAzB9B,EAKG+B,KALH/B;EALF;;EAaA,MAAMgC,aAAa,GAAIC,CAAD,IAA8B;IAClDV,SAAS,CAACR,YAAD,EAAe,CAAf,CAATQ;IACAZ,SAAS,SAATA,aAAS,WAATA,qBAAS,CAAGsB,CAAH,CAATtB;EAFF;;EAKA,MAAMuB,cAAc,GAAID,CAAD,IAA8B;IACnDV,SAAS,CAAC,CAAD,EAAI,GAAJ,CAATA;IACAX,UAAU,SAAVA,cAAU,WAAVA,sBAAU,CAAGqB,CAAH,CAAVrB;EAFF;;EAKA,oBACEb,oBAACK,iBAAD;IACEO,SAAS,EAAEqB,aADb;IAEEpB,UAAU,EAAEsB,cAFd;IAGErB,cAAc,EACZN,uBAAuB,GACnB;MACE4B,KAAK,EACHrB,UAAU,KAAKsB,SAAftB,GACIA,UADJA,GAEIK,IAAI,GACJ,0BADI,GAEJ,oBANR;MAOE,GAAGN;IAPL,CADmB,GAUnBuB,SAdR;IAgBEpB,KAAK,EAAE,CAAC;MAAEI,OAAO,EAAE,CAACb,uBAAD,GAA2Ba,OAA3B,GAAqC;IAAhD,CAAD,EAAsDJ,KAAtD;EAhBT,GAiBMC,IAjBN,EADF;AAqBD","names":["useTheme","React","Animated","Easing","Platform","Pressable","AnimatedPressable","createAnimatedComponent","ANDROID_VERSION_LOLLIPOP","ANDROID_SUPPORTS_RIPPLE","OS","Version","PlatformPressable","onPressIn","onPressOut","android_ripple","pressColor","pressOpacity","style","rest","_ref","dark","opacity","useState","Value","animateTo","toValue","duration","timing","easing","inOut","quad","useNativeDriver","start","handlePressIn","e","handlePressOut","color","undefined"],"sources":["C:\\Users\\mateo\\Desktop\\React\\react-test\\node_modules\\@react-navigation\\elements\\lib\\module\\PlatformPressable.tsx"],"sourcesContent":["import { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  Animated,\n  Easing,\n  GestureResponderEvent,\n  Platform,\n  Pressable,\n  PressableProps,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nexport type Props = Omit<PressableProps, 'style'> & {\n  pressColor?: string;\n  pressOpacity?: number;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  children: React.ReactNode;\n};\n\nconst AnimatedPressable = Animated.createAnimatedComponent(Pressable);\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_SUPPORTS_RIPPLE =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\n/**\n * PlatformPressable provides an abstraction on top of Pressable to handle platform differences.\n */\nexport default function PlatformPressable({\n  onPressIn,\n  onPressOut,\n  android_ripple,\n  pressColor,\n  pressOpacity = 0.3,\n  style,\n  ...rest\n}: Props) {\n  const { dark } = useTheme();\n  const [opacity] = React.useState(() => new Animated.Value(1));\n\n  const animateTo = (toValue: number, duration: number) => {\n    if (ANDROID_SUPPORTS_RIPPLE) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue,\n      duration,\n      easing: Easing.inOut(Easing.quad),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressIn = (e: GestureResponderEvent) => {\n    animateTo(pressOpacity, 0);\n    onPressIn?.(e);\n  };\n\n  const handlePressOut = (e: GestureResponderEvent) => {\n    animateTo(1, 200);\n    onPressOut?.(e);\n  };\n\n  return (\n    <AnimatedPressable\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      android_ripple={\n        ANDROID_SUPPORTS_RIPPLE\n          ? {\n              color:\n                pressColor !== undefined\n                  ? pressColor\n                  : dark\n                  ? 'rgba(255, 255, 255, .32)'\n                  : 'rgba(0, 0, 0, .32)',\n              ...android_ripple,\n            }\n          : undefined\n      }\n      style={[{ opacity: !ANDROID_SUPPORTS_RIPPLE ? opacity : 1 }, style]}\n      {...rest}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}