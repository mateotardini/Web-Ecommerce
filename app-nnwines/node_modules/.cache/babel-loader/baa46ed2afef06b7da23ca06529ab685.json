{"ast":null,"code":"import * as React from 'react';\n/**\n * Hook which lets child navigators add getters to be called for obtaining rehydrated state.\n */\n\nexport default function useKeyedChildListeners() {\n  const {\n    current: keyedListeners\n  } = React.useRef(Object.assign(Object.create(null), {\n    getState: {},\n    beforeRemove: {}\n  }));\n  const addKeyedListener = React.useCallback((type, key, listener) => {\n    // @ts-expect-error: according to ref stated above you can use `key` to index type\n    keyedListeners[type][key] = listener;\n    return () => {\n      // @ts-expect-error: according to ref stated above you can use `key` to index type\n      keyedListeners[type][key] = undefined;\n    };\n  }, [keyedListeners]);\n  return {\n    keyedListeners,\n    addKeyedListener\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAIA;AACA;AACA;;AACA,eAAe,SAASC,sBAAT,GAAkC;EAC/C,MAAM;IAAEC,OAAO,EAAEC;EAAX,IAA8BH,KAAK,CAACI,MAANJ,CAMlCK,MAAM,CAACC,MAAPD,CAAcA,MAAM,CAACE,MAAPF,CAAc,IAAdA,CAAdA,EAAmC;IACjCG,QAAQ,EAAE,EADuB;IAEjCC,YAAY,EAAE;EAFmB,CAAnCJ,CANkCL,CAApC;EAYA,MAAMU,gBAAgB,GAAGV,KAAK,CAACW,WAANX,CACvB,CACEY,IADF,EAEEC,GAFF,EAGEC,QAHF,KAIK;IACH;IACAX,cAAc,CAACS,IAAD,CAAdT,CAAqBU,GAArBV,IAA4BW,QAA5BX;IAEA,OAAO,MAAM;MACX;MACAA,cAAc,CAACS,IAAD,CAAdT,CAAqBU,GAArBV,IAA4BY,SAA5BZ;IAFF;EATqB,GAcvB,CAACA,cAAD,CAduBH,CAAzB;EAiBA,OAAO;IACLG,cADK;IAELO;EAFK,CAAP;AAID","names":["React","useKeyedChildListeners","current","keyedListeners","useRef","Object","assign","create","getState","beforeRemove","addKeyedListener","useCallback","type","key","listener","undefined"],"sources":["C:\\Users\\mateo\\Desktop\\React\\react-test\\node_modules\\@react-navigation\\core\\lib\\module\\useKeyedChildListeners.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport type { KeyedListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add getters to be called for obtaining rehydrated state.\n */\nexport default function useKeyedChildListeners() {\n  const { current: keyedListeners } = React.useRef<{\n    [K in keyof KeyedListenerMap]: Record<\n      string,\n      KeyedListenerMap[K] | undefined\n    >;\n  }>(\n    Object.assign(Object.create(null), {\n      getState: {},\n      beforeRemove: {},\n    })\n  );\n\n  const addKeyedListener = React.useCallback(\n    <T extends keyof KeyedListenerMap>(\n      type: T,\n      key: string,\n      listener: KeyedListenerMap[T]\n    ) => {\n      // @ts-expect-error: according to ref stated above you can use `key` to index type\n      keyedListeners[type][key] = listener;\n\n      return () => {\n        // @ts-expect-error: according to ref stated above you can use `key` to index type\n        keyedListeners[type][key] = undefined;\n      };\n    },\n    [keyedListeners]\n  );\n\n  return {\n    keyedListeners,\n    addKeyedListener,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}