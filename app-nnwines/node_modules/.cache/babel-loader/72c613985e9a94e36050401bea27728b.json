{"ast":null,"code":"import * as React from 'react';\nimport { Platform, Text } from 'react-native';\nimport useLinkProps from './useLinkProps';\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\n\nexport default function Link(_ref) {\n  let {\n    to,\n    action,\n    ...rest\n  } = _ref;\n  const props = useLinkProps({\n    to,\n    action\n  });\n\n  const onPress = e => {\n    if ('onPress' in rest) {\n      var _rest$onPress;\n\n      (_rest$onPress = rest.onPress) === null || _rest$onPress === void 0 ? void 0 : _rest$onPress.call(rest, e);\n    }\n\n    props.onPress(e);\n  };\n\n  return /*#__PURE__*/React.createElement(Text, { ...props,\n    ...rest,\n    ...Platform.select({\n      web: {\n        onClick: onPress\n      },\n      default: {\n        onPress\n      }\n    })\n  });\n}","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAgCC,QAAhC,EAA0CC,IAA1C,QAAiE,cAAjE;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,IAAT,OAIM;EAAA,IAJyD;IAC5EC,EAD4E;IAE5EC,MAF4E;IAG5E,GAAGC;EAHyE,IAIzDC;EACnB,MAAMC,KAAK,GAAGN,YAAY,CAAY;IAAEE,EAAF;IAAMC;EAAN,CAAZ,CAA1B;;EAEA,MAAMI,OAAO,GACXC,CADc,IAEX;IACH,IAAI,aAAaJ,IAAjB,EAAuB;MAAA;;MACrB,qBAAI,CAACG,OAAL,2EAAeC,CAAf;IACD;;IAEDF,KAAK,CAACC,OAAND,CAAcE,CAAdF;EAPF;;EAUA,oBAAOT,KAAK,CAACY,aAANZ,CAAoBE,IAApBF,EAA0B,EAC/B,GAAGS,KAD4B;IAE/B,GAAGF,IAF4B;IAG/B,GAAGN,QAAQ,CAACY,MAATZ,CAAgB;MACjBa,GAAG,EAAE;QAAEC,OAAO,EAAEL;MAAX,CADY;MAEjBM,OAAO,EAAE;QAAEN;MAAF;IAFQ,CAAhBT;EAH4B,CAA1BD,CAAP;AAQD","names":["React","Platform","Text","useLinkProps","Link","to","action","rest","_ref","props","onPress","e","createElement","select","web","onClick","default"],"sources":["C:\\Users\\mateo\\Desktop\\React\\react-test\\node_modules\\@react-navigation\\native\\lib\\module\\Link.tsx"],"sourcesContent":["import type { NavigationAction } from '@react-navigation/core';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform, Text, TextProps } from 'react-native';\n\nimport useLinkProps from './useLinkProps';\nimport type { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n  target?: string;\n  onPress?: (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n} & (TextProps & { children: React.ReactNode });\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport default function Link<ParamList extends ReactNavigation.RootParamList>({\n  to,\n  action,\n  ...rest\n}: Props<ParamList>) {\n  const props = useLinkProps<ParamList>({ to, action });\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: { onClick: onPress } as any,\n      default: { onPress },\n    }),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}