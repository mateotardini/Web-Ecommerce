{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\nexport const shouldPreventRemove = (emitter, beforeRemoveListeners, currentRoutes, nextRoutes, action) => {\n  var _action$VISITED_ROUTE;\n\n  const nextRouteKeys = nextRoutes.map(route => route.key); // Call these in reverse order so last screens handle the event first\n\n  const removedRoutes = currentRoutes.filter(route => !nextRouteKeys.includes(route.key)).reverse();\n  const visitedRouteKeys = // @ts-expect-error: add this property to mark that we've already emitted this action\n  (_action$VISITED_ROUTE = action[VISITED_ROUTE_KEYS]) !== null && _action$VISITED_ROUTE !== void 0 ? _action$VISITED_ROUTE : new Set();\n  const beforeRemoveAction = { ...action,\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys\n  };\n\n  for (const route of removedRoutes) {\n    var _beforeRemoveListener;\n\n    if (visitedRouteKeys.has(route.key)) {\n      // Skip if we've already emitted this action for this screen\n      continue;\n    } // First, we need to check if any child screens want to prevent it\n\n\n    const isPrevented = (_beforeRemoveListener = beforeRemoveListeners[route.key]) === null || _beforeRemoveListener === void 0 ? void 0 : _beforeRemoveListener.call(beforeRemoveListeners, beforeRemoveAction);\n\n    if (isPrevented) {\n      return true;\n    }\n\n    visitedRouteKeys.add(route.key);\n    const event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: {\n        action: beforeRemoveAction\n      },\n      canPreventDefault: true\n    });\n\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n\n  return false;\n};\nexport default function useOnPreventRemove(_ref) {\n  let {\n    getState,\n    emitter,\n    beforeRemoveListeners\n  } = _ref;\n  const {\n    addKeyedListener\n  } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route === null || route === void 0 ? void 0 : route.key;\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener('beforeRemove', routeKey, action => {\n        const state = getState();\n        return shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, [], action);\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}","map":{"version":3,"mappings":"AAIA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,wBAAP,MAEO,4BAFP;AAGA,OAAOC,sBAAP,MAAmC,0BAAnC;AAUA,MAAMC,kBAAkB,GAAGC,MAAM,CAAC,oBAAD,CAAjC;AAEA,OAAO,MAAMC,mBAAmB,GAAG,CACjCC,OADiC,EAEjCC,qBAFiC,EAGjCC,aAHiC,EAIjCC,UAJiC,EAKjCC,MALiC,KAM9B;EAAA;;EACH,MAAMC,aAAa,GAAGF,UAAU,CAACG,GAAXH,CAAgBI,KAAD,IAAWA,KAAK,CAACC,GAAhCL,CAAtB,CADG,CAGH;;EACA,MAAMM,aAAa,GAAGP,aAAa,CAChCQ,MADmBR,CACXK,KAAD,IAAW,CAACF,aAAa,CAACM,QAAdN,CAAuBE,KAAK,CAACC,GAA7BH,CADAH,EAEnBU,OAFmBV,EAAtB;EAIA,MAAMW,gBAA6B,GACjC;EADiC,yBAEjCT,MAAM,CAACP,kBAAD,CAF2B,yEAEH,IAAIiB,GAAJ,EAFhC;EAIA,MAAMC,kBAAkB,GAAG,EACzB,GAAGX,MADsB;IAEzB,CAACP,kBAAD,GAAsBgB;EAFG,CAA3B;;EAKA,KAAK,MAAMN,KAAX,IAAoBE,aAApB,EAAmC;IAAA;;IACjC,IAAII,gBAAgB,CAACG,GAAjBH,CAAqBN,KAAK,CAACC,GAA3BK,CAAJ,EAAqC;MACnC;MACA;IAH+B,EAMjC;;;IACA,MAAMI,WAAW,4BAAGhB,qBAAqB,CAACM,KAAK,CAACC,GAAP,CAAxB,0DAAGU,kDAAmCH,kBAAnC,CAApB;;IAEA,IAAIE,WAAJ,EAAiB;MACf,OAAO,IAAP;IACD;;IAEDJ,gBAAgB,CAACM,GAAjBN,CAAqBN,KAAK,CAACC,GAA3BK;IAEA,MAAMO,KAAK,GAAGpB,OAAO,CAACqB,IAARrB,CAAa;MACzBsB,IAAI,EAAE,cADmB;MAEzBC,MAAM,EAAEhB,KAAK,CAACC,GAFW;MAGzBgB,IAAI,EAAE;QAAEpB,MAAM,EAAEW;MAAV,CAHmB;MAIzBU,iBAAiB,EAAE;IAJM,CAAbzB,CAAd;;IAOA,IAAIoB,KAAK,CAACM,gBAAV,EAA4B;MAC1B,OAAO,IAAP;IACD;EACF;;EAED,OAAO,KAAP;AAlDK;AAqDP,eAAe,SAASC,kBAAT,OAIH;EAAA,IAJ+B;IACzCC,QADyC;IAEzC5B,OAFyC;IAGzCC;EAHyC,IAI/B4B;EACV,MAAM;IAAEC;EAAF,IAAuBpC,KAAK,CAACqC,UAANrC,CAAiBC,wBAAjBD,CAA7B;EACA,MAAMa,KAAK,GAAGb,KAAK,CAACqC,UAANrC,CAAiBE,sBAAjBF,CAAd;EACA,MAAMsC,QAAQ,GAAGzB,KAAH,SAAGA,SAAH,WAAGA,GAAH,MAAGA,QAAK,CAAEC,GAAxB;EAEAd,KAAK,CAACuC,SAANvC,CAAgB,MAAM;IACpB,IAAIsC,QAAJ,EAAc;MACZ,OAAOF,gBAAP,SAAOA,oBAAP,WAAOA,GAAP,MAAOA,mBAAgB,CAAG,cAAH,EAAmBE,QAAnB,EAA8B5B,MAAD,IAAY;QAC9D,MAAM8B,KAAK,GAAGN,QAAQ,EAAtB;QAEA,OAAO7B,mBAAmB,CACxBC,OADwB,EAExBC,qBAFwB,EAGxBiC,KAAK,CAACC,MAHkB,EAIxB,EAJwB,EAKxB/B,MALwB,CAA1B;MAHqB,EAAvB;IAWD;EAbH,GAcG,CAAC0B,gBAAD,EAAmB7B,qBAAnB,EAA0CD,OAA1C,EAAmD4B,QAAnD,EAA6DI,QAA7D,CAdHtC;AAeD","names":["React","NavigationBuilderContext","NavigationRouteContext","VISITED_ROUTE_KEYS","Symbol","shouldPreventRemove","emitter","beforeRemoveListeners","currentRoutes","nextRoutes","action","nextRouteKeys","map","route","key","removedRoutes","filter","includes","reverse","visitedRouteKeys","Set","beforeRemoveAction","has","isPrevented","_beforeRemoveListener","add","event","emit","type","target","data","canPreventDefault","defaultPrevented","useOnPreventRemove","getState","_ref","addKeyedListener","useContext","routeKey","useEffect","state","routes"],"sources":["C:\\Users\\mateo\\Desktop\\React\\react-test\\node_modules\\@react-navigation\\core\\lib\\module\\useOnPreventRemove.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options = {\n  getState: () => NavigationState;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n};\n\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\n\nexport const shouldPreventRemove = (\n  emitter: NavigationEventEmitter<EventMapCore<any>>,\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>,\n  currentRoutes: { key: string }[],\n  nextRoutes: { key?: string | undefined }[],\n  action: NavigationAction\n) => {\n  const nextRouteKeys = nextRoutes.map((route) => route.key);\n\n  // Call these in reverse order so last screens handle the event first\n  const removedRoutes = currentRoutes\n    .filter((route) => !nextRouteKeys.includes(route.key))\n    .reverse();\n\n  const visitedRouteKeys: Set<string> =\n    // @ts-expect-error: add this property to mark that we've already emitted this action\n    action[VISITED_ROUTE_KEYS] ?? new Set<string>();\n\n  const beforeRemoveAction = {\n    ...action,\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys,\n  };\n\n  for (const route of removedRoutes) {\n    if (visitedRouteKeys.has(route.key)) {\n      // Skip if we've already emitted this action for this screen\n      continue;\n    }\n\n    // First, we need to check if any child screens want to prevent it\n    const isPrevented = beforeRemoveListeners[route.key]?.(beforeRemoveAction);\n\n    if (isPrevented) {\n      return true;\n    }\n\n    visitedRouteKeys.add(route.key);\n\n    const event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: { action: beforeRemoveAction },\n      canPreventDefault: true,\n    });\n\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default function useOnPreventRemove({\n  getState,\n  emitter,\n  beforeRemoveListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route?.key;\n\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener?.('beforeRemove', routeKey, (action) => {\n        const state = getState();\n\n        return shouldPreventRemove(\n          emitter,\n          beforeRemoveListeners,\n          state.routes,\n          [],\n          action\n        );\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}\n"]},"metadata":{},"sourceType":"module"}