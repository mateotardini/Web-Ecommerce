{"ast":null,"code":"const formatToList = items => items.map(key => `- ${key}`).join('\\n');\n\nexport default function validatePathConfig(config) {\n  let root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const validKeys = ['initialRouteName', 'screens'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  const invalidKeys = Object.keys(config).filter(key => !validKeys.includes(key));\n\n  if (invalidKeys.length) {\n    throw new Error(`Found invalid properties in the configuration:\\n${formatToList(invalidKeys)}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(validKeys)}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`);\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(_ref => {\n      let [_, value] = _ref;\n\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}","map":{"version":3,"mappings":"AAAA,MAAMA,YAAY,GAAIC,KAAD,IACnBA,KAAK,CAACC,GAAND,CAAWE,GAAD,IAAU,KAAIA,GAAI,EAA5BF,EAA+BG,IAA/BH,CAAoC,IAApCA,CADF;;AAGA,eAAe,SAASI,kBAAT,CAA4BC,MAA5B,EAAsD;EAAA,IAAbC,IAAa,uEAAN,IAAM;EACnE,MAAMC,SAAS,GAAG,CAAC,kBAAD,EAAqB,SAArB,CAAlB;;EAEA,IAAI,CAACD,IAAL,EAAW;IACTC,SAAS,CAACC,IAAVD,CAAe,MAAfA,EAAuB,OAAvBA,EAAgC,WAAhCA,EAA6C,OAA7CA;EACD;;EAED,MAAME,WAAW,GAAGC,MAAM,CAACC,IAAPD,CAAYL,MAAZK,EAAoBE,MAApBF,CACjBR,GAAD,IAAS,CAACK,SAAS,CAACM,QAAVN,CAAmBL,GAAnBK,CADQG,CAApB;;EAIA,IAAID,WAAW,CAACK,MAAhB,EAAwB;IACtB,MAAM,IAAIC,KAAJ,CACH,mDAAkDhB,YAAY,CAC7DU,WAD6D,CAE7D,qHAAoHV,YAAY,CAChIQ,SADgI,CAEhI,wHALE,CAAN;EAOD;;EAED,IAAIF,MAAM,CAACW,OAAX,EAAoB;IAClBN,MAAM,CAACO,OAAPP,CAAeL,MAAM,CAACW,OAAtBN,EAA+BQ,OAA/BR,CAAuCS,QAAgB;MAAA,IAAf,CAACC,CAAD,EAAIC,KAAJ,IAAeF;;MACrD,IAAI,OAAOE,KAAP,KAAiB,QAArB,EAA+B;QAC7BjB,kBAAkB,CAACiB,KAAD,EAAQ,KAAR,CAAlBjB;MACD;IAHH;EAKD;AACF","names":["formatToList","items","map","key","join","validatePathConfig","config","root","validKeys","push","invalidKeys","Object","keys","filter","includes","length","Error","screens","entries","forEach","_ref","_","value"],"sources":["C:\\Users\\mateo\\Desktop\\React\\react-test\\node_modules\\@react-navigation\\core\\lib\\module\\validatePathConfig.tsx"],"sourcesContent":["const formatToList = (items: string[]) =>\n  items.map((key) => `- ${key}`).join('\\n');\n\nexport default function validatePathConfig(config: any, root = true) {\n  const validKeys = ['initialRouteName', 'screens'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  const invalidKeys = Object.keys(config).filter(\n    (key) => !validKeys.includes(key)\n  );\n\n  if (invalidKeys.length) {\n    throw new Error(\n      `Found invalid properties in the configuration:\\n${formatToList(\n        invalidKeys\n      )}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(\n        validKeys\n      )}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`\n    );\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(([_, value]) => {\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}