{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"activeOpacity\", \"delayPressIn\", \"delayPressOut\", \"delayLongPress\", \"disabled\", \"focusable\", \"onLongPress\", \"onPress\", \"onPressIn\", \"onPressOut\", \"rejectResponderTermination\", \"style\"];\nimport * as React from 'react';\nimport { useCallback, useMemo, useState, useRef } from 'react';\nimport useMergeRefs from '../../modules/useMergeRefs';\nimport usePressEvents from '../../modules/usePressEvents';\nimport StyleSheet from '../StyleSheet';\nimport View from '../View';\n/**\n * A wrapper for making views respond properly to touches.\n * On press down, the opacity of the wrapped view is decreased, dimming it.\n */\n\nfunction TouchableOpacity(props, forwardedRef) {\n  var activeOpacity = props.activeOpacity,\n      delayPressIn = props.delayPressIn,\n      delayPressOut = props.delayPressOut,\n      delayLongPress = props.delayLongPress,\n      disabled = props.disabled,\n      focusable = props.focusable,\n      onLongPress = props.onLongPress,\n      onPress = props.onPress,\n      onPressIn = props.onPressIn,\n      onPressOut = props.onPressOut,\n      rejectResponderTermination = props.rejectResponderTermination,\n      style = props.style,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var hostRef = useRef(null);\n  var setRef = useMergeRefs(forwardedRef, hostRef);\n\n  var _useState = useState('0s'),\n      duration = _useState[0],\n      setDuration = _useState[1];\n\n  var _useState2 = useState(null),\n      opacityOverride = _useState2[0],\n      setOpacityOverride = _useState2[1];\n\n  var setOpacityTo = useCallback(function (value, duration) {\n    setOpacityOverride(value);\n    setDuration(duration ? duration / 1000 + \"s\" : '0s');\n  }, [setOpacityOverride, setDuration]);\n  var setOpacityActive = useCallback(function (duration) {\n    setOpacityTo(activeOpacity !== null && activeOpacity !== void 0 ? activeOpacity : 0.2, duration);\n  }, [activeOpacity, setOpacityTo]);\n  var setOpacityInactive = useCallback(function (duration) {\n    setOpacityTo(null, duration);\n  }, [setOpacityTo]);\n  var pressConfig = useMemo(function () {\n    return {\n      cancelable: !rejectResponderTermination,\n      disabled: disabled,\n      delayLongPress: delayLongPress,\n      delayPressStart: delayPressIn,\n      delayPressEnd: delayPressOut,\n      onLongPress: onLongPress,\n      onPress: onPress,\n      onPressStart: function onPressStart(event) {\n        var isGrant = event.dispatchConfig != null ? event.dispatchConfig.registrationName === 'onResponderGrant' : event.type === 'keydown';\n        setOpacityActive(isGrant ? 0 : 150);\n\n        if (onPressIn != null) {\n          onPressIn(event);\n        }\n      },\n      onPressEnd: function onPressEnd(event) {\n        setOpacityInactive(250);\n\n        if (onPressOut != null) {\n          onPressOut(event);\n        }\n      }\n    };\n  }, [delayLongPress, delayPressIn, delayPressOut, disabled, onLongPress, onPress, onPressIn, onPressOut, rejectResponderTermination, setOpacityActive, setOpacityInactive]);\n  var pressEventHandlers = usePressEvents(hostRef, pressConfig);\n  return /*#__PURE__*/React.createElement(View, _extends({}, rest, pressEventHandlers, {\n    accessibilityDisabled: disabled,\n    focusable: !disabled && focusable !== false,\n    pointerEvents: disabled ? 'none' : undefined,\n    ref: setRef,\n    style: [styles.root, !disabled && styles.actionable, style, opacityOverride != null && {\n      opacity: opacityOverride\n    }, {\n      transitionDuration: duration\n    }]\n  }));\n}\n\nvar styles = StyleSheet.create({\n  root: {\n    transitionProperty: 'opacity',\n    transitionDuration: '0.15s',\n    userSelect: 'none'\n  },\n  actionable: {\n    cursor: 'pointer',\n    touchAction: 'manipulation'\n  }\n});\nvar MemoedTouchableOpacity = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(TouchableOpacity));\nMemoedTouchableOpacity.displayName = 'TouchableOpacity';\nexport default MemoedTouchableOpacity;","map":null,"metadata":{},"sourceType":"module"}