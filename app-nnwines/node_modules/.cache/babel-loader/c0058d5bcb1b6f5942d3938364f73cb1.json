{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\mateo\\\\Desktop\\\\React\\\\react-test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\mateo\\\\Desktop\\\\React\\\\react-test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport EventEmitter from '../../vendor/react-native/emitter/_EventEmitter';\nimport canUseDOM from '../../modules/canUseDom'; // Android 4.4 browser\n\nvar isPrefixed = canUseDOM && !document.hasOwnProperty('hidden') && document.hasOwnProperty('webkitHidden');\nvar EVENT_TYPES = ['change', 'memoryWarning'];\nvar VISIBILITY_CHANGE_EVENT = isPrefixed ? 'webkitvisibilitychange' : 'visibilitychange';\nvar VISIBILITY_STATE_PROPERTY = isPrefixed ? 'webkitVisibilityState' : 'visibilityState';\nvar AppStates = {\n  BACKGROUND: 'background',\n  ACTIVE: 'active'\n};\nvar changeEmitter = null;\n\nvar AppState = /*#__PURE__*/function () {\n  function AppState() {\n    _classCallCheck(this, AppState);\n  }\n\n  _createClass(AppState, null, [{\n    key: \"addEventListener\",\n    value: function addEventListener(type, handler) {\n      if (AppState.isAvailable) {\n        invariant(EVENT_TYPES.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n        if (type === 'change') {\n          if (!changeEmitter) {\n            changeEmitter = new EventEmitter();\n            document.addEventListener(VISIBILITY_CHANGE_EVENT, function () {\n              if (changeEmitter) {\n                changeEmitter.emit('change', AppState.currentState);\n              }\n            }, false);\n          }\n\n          return changeEmitter.addListener(type, handler);\n        }\n      }\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, handler) {\n      if (AppState.isAvailable) {\n        console.error(\"AppState.removeListener('\" + type + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `AppState.addEventListener`.');\n        invariant(EVENT_TYPES.indexOf(type) !== -1, 'Trying to remove listener for unknown event: \"%s\"', type);\n\n        if (type === 'change' && changeEmitter) {\n          changeEmitter.removeListener(handler);\n        }\n      }\n    }\n  }, {\n    key: \"currentState\",\n    get: function get() {\n      if (!AppState.isAvailable) {\n        return AppStates.ACTIVE;\n      }\n\n      switch (document[VISIBILITY_STATE_PROPERTY]) {\n        case 'hidden':\n        case 'prerender':\n        case 'unloaded':\n          return AppStates.BACKGROUND;\n\n        default:\n          return AppStates.ACTIVE;\n      }\n    }\n  }]);\n\n  return AppState;\n}();\n\nexport { AppState as default };\nAppState.isAvailable = canUseDOM && document[VISIBILITY_STATE_PROPERTY];","map":null,"metadata":{},"sourceType":"module"}