{"ast":null,"code":"import { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport NavigationContext from './NavigationContext';\nimport { PrivateValueStore } from './types';\nimport UnhandledActionContext from './UnhandledActionContext'; // This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\n\nPrivateValueStore;\n/**\n * Navigation object with helper methods to be used by a navigator.\n * This object includes methods for common actions as well as methods the parent screen's navigation object.\n */\n\nexport default function useNavigationHelpers(_ref) {\n  let {\n    id: navigatorId,\n    onAction,\n    getState,\n    emitter,\n    router\n  } = _ref;\n  const onUnhandledAction = React.useContext(UnhandledActionContext);\n  const parentNavigationHelpers = React.useContext(NavigationContext);\n  return React.useMemo(() => {\n    const dispatch = op => {\n      const action = typeof op === 'function' ? op(getState()) : op;\n      const handled = onAction(action);\n\n      if (!handled) {\n        onUnhandledAction === null || onUnhandledAction === void 0 ? void 0 : onUnhandledAction(action);\n      }\n    };\n\n    const actions = { ...router.actionCreators,\n      ...CommonActions\n    };\n    const helpers = Object.keys(actions).reduce((acc, name) => {\n      // @ts-expect-error: name is a valid key, but TypeScript is dumb\n      acc[name] = function () {\n        return dispatch(actions[name](...arguments));\n      };\n\n      return acc;\n    }, {});\n    const navigationHelpers = { ...parentNavigationHelpers,\n      ...helpers,\n      dispatch,\n      emit: emitter.emit,\n      isFocused: parentNavigationHelpers ? parentNavigationHelpers.isFocused : () => true,\n      canGoBack: () => {\n        const state = getState();\n        return router.getStateForAction(state, CommonActions.goBack(), {\n          routeNames: state.routeNames,\n          routeParamList: {},\n          routeGetIdList: {}\n        }) !== null || (parentNavigationHelpers === null || parentNavigationHelpers === void 0 ? void 0 : parentNavigationHelpers.canGoBack()) || false;\n      },\n      getId: () => navigatorId,\n      getParent: id => {\n        if (id !== undefined) {\n          let current = navigationHelpers;\n\n          while (current && id !== current.getId()) {\n            current = current.getParent();\n          }\n\n          return current;\n        }\n\n        return parentNavigationHelpers;\n      },\n      getState\n    };\n    return navigationHelpers;\n  }, [navigatorId, emitter.emit, getState, onAction, onUnhandledAction, parentNavigationHelpers, router]);\n}","map":{"version":3,"mappings":"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","names":["CommonActions","React","NavigationContext","PrivateValueStore","UnhandledActionContext","useNavigationHelpers","id","navigatorId","onAction","getState","emitter","router","_ref","onUnhandledAction","useContext","parentNavigationHelpers","useMemo","dispatch","op","action","handled","actions","actionCreators","helpers","Object","keys","reduce","acc","name","navigationHelpers","emit","isFocused","canGoBack","state","getStateForAction","goBack","routeNames","routeParamList","routeGetIdList","getId","getParent","undefined","current"],"sources":["C:\\Users\\mateo\\Desktop\\React\\react-test\\node_modules\\@react-navigation\\core\\lib\\module\\useNavigationHelpers.tsx"],"sourcesContent":["import {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationContext from './NavigationContext';\nimport { NavigationHelpers, PrivateValueStore } from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype Options<State extends NavigationState, Action extends NavigationAction> = {\n  id: string | undefined;\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  emitter: NavigationEventEmitter<any>;\n  router: Router<State, Action>;\n};\n\n/**\n * Navigation object with helper methods to be used by a navigator.\n * This object includes methods for common actions as well as methods the parent screen's navigation object.\n */\nexport default function useNavigationHelpers<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  Action extends NavigationAction,\n  EventMap extends Record<string, any>\n>({\n  id: navigatorId,\n  onAction,\n  getState,\n  emitter,\n  router,\n}: Options<State, Action>) {\n  const onUnhandledAction = React.useContext(UnhandledActionContext);\n  const parentNavigationHelpers = React.useContext(NavigationContext);\n\n  return React.useMemo(() => {\n    const dispatch = (op: Action | ((state: State) => Action)) => {\n      const action = typeof op === 'function' ? op(getState()) : op;\n\n      const handled = onAction(action);\n\n      if (!handled) {\n        onUnhandledAction?.(action);\n      }\n    };\n\n    const actions = {\n      ...router.actionCreators,\n      ...CommonActions,\n    };\n\n    const helpers = Object.keys(actions).reduce((acc, name) => {\n      // @ts-expect-error: name is a valid key, but TypeScript is dumb\n      acc[name] = (...args: any) => dispatch(actions[name](...args));\n      return acc;\n    }, {} as ActionHelpers);\n\n    const navigationHelpers = {\n      ...parentNavigationHelpers,\n      ...helpers,\n      dispatch,\n      emit: emitter.emit,\n      isFocused: parentNavigationHelpers\n        ? parentNavigationHelpers.isFocused\n        : () => true,\n      canGoBack: () => {\n        const state = getState();\n\n        return (\n          router.getStateForAction(state, CommonActions.goBack() as Action, {\n            routeNames: state.routeNames,\n            routeParamList: {},\n            routeGetIdList: {},\n          }) !== null ||\n          parentNavigationHelpers?.canGoBack() ||\n          false\n        );\n      },\n      getId: () => navigatorId,\n      getParent: (id?: string) => {\n        if (id !== undefined) {\n          let current = navigationHelpers;\n\n          while (current && id !== current.getId()) {\n            current = current.getParent();\n          }\n\n          return current;\n        }\n\n        return parentNavigationHelpers;\n      },\n      getState,\n    } as NavigationHelpers<ParamListBase, EventMap> & ActionHelpers;\n\n    return navigationHelpers;\n  }, [\n    navigatorId,\n    emitter.emit,\n    getState,\n    onAction,\n    onUnhandledAction,\n    parentNavigationHelpers,\n    router,\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}