{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\n\nconst BaseRouter = {\n  getStateForAction(state, action) {\n    switch (action.type) {\n      case 'SET_PARAMS':\n        {\n          const index = action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          return { ...state,\n            routes: state.routes.map((r, i) => i === index ? { ...r,\n              params: { ...r.params,\n                ...action.payload.params\n              }\n            } : r)\n          };\n        }\n\n      case 'RESET':\n        {\n          const nextState = action.payload;\n\n          if (nextState.routes.length === 0 || nextState.routes.some(route => !state.routeNames.includes(route.name))) {\n            return null;\n          }\n\n          if (nextState.stale === false) {\n            if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(name => !state.routeNames.includes(name))) {\n              return null;\n            }\n\n            return { ...nextState,\n              routes: nextState.routes.map(route => route.key ? route : { ...route,\n                key: `${route.name}-${nanoid()}`\n              })\n            };\n          }\n\n          return nextState;\n        }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action) {\n    return action.type === 'NAVIGATE';\n  }\n\n};\nexport default BaseRouter;","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,mBAAvB;AAQA;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAG;EACjBC,iBAAiB,CACfC,KADe,EAEfC,MAFe,EAGqB;IACpC,QAAQA,MAAM,CAACC,IAAf;MACE,KAAK,YAAL;QAAmB;UACjB,MAAMC,KAAK,GAAGF,MAAM,CAACG,MAAPH,GACVD,KAAK,CAACK,MAANL,CAAaM,SAAbN,CAAwBO,CAAD,IAAOA,CAAC,CAACC,GAAFD,KAAUN,MAAM,CAACG,MAA/CJ,CADUC,GAEVD,KAAK,CAACG,KAFV;;UAIA,IAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;YAChB,OAAO,IAAP;UACD;;UAED,OAAO,EACL,GAAGH,KADE;YAELK,MAAM,EAAEL,KAAK,CAACK,MAANL,CAAaS,GAAbT,CAAiB,CAACO,CAAD,EAAIG,CAAJ,KACvBA,CAAC,KAAKP,KAANO,GACI,EAAE,GAAGH,CAAL;cAAQI,MAAM,EAAE,EAAE,GAAGJ,CAAC,CAACI,MAAP;gBAAe,GAAGV,MAAM,CAACW,OAAPX,CAAeU;cAAjC;YAAhB,CADJD,GAEIH,CAHEP;UAFH,CAAP;QAQD;;MAED,KAAK,OAAL;QAAc;UACZ,MAAMa,SAAS,GAAGZ,MAAM,CAACW,OAAzB;;UAEA,IACEC,SAAS,CAACR,MAAVQ,CAAiBC,MAAjBD,KAA4B,CAA5BA,IACAA,SAAS,CAACR,MAAVQ,CAAiBE,IAAjBF,CACGG,KAAD,IAA6B,CAAChB,KAAK,CAACiB,UAANjB,CAAiBkB,QAAjBlB,CAA0BgB,KAAK,CAACG,IAAhCnB,CADhCa,CAFF,EAKE;YACA,OAAO,IAAP;UACD;;UAED,IAAIA,SAAS,CAACO,KAAVP,KAAoB,KAAxB,EAA+B;YAC7B,IACEb,KAAK,CAACiB,UAANjB,CAAiBc,MAAjBd,KAA4Ba,SAAS,CAACI,UAAVJ,CAAqBC,MAAjDd,IACAa,SAAS,CAACI,UAAVJ,CAAqBE,IAArBF,CACGM,IAAD,IAAU,CAACnB,KAAK,CAACiB,UAANjB,CAAiBkB,QAAjBlB,CAA0BmB,IAA1BnB,CADba,CAFF,EAKE;cACA,OAAO,IAAP;YACD;;YAED,OAAO,EACL,GAAGA,SADE;cAELR,MAAM,EAAEQ,SAAS,CAACR,MAAVQ,CAAiBJ,GAAjBI,CAAsBG,KAAD,IAC3BA,KAAK,CAACR,GAANQ,GAAYA,KAAZA,GAAoB,EAAE,GAAGA,KAAL;gBAAYR,GAAG,EAAG,GAAEQ,KAAK,CAACG,IAAK,IAAGtB,MAAM,EAAG;cAA3C,CADdgB;YAFH,CAAP;UAMD;;UAED,OAAOA,SAAP;QACD;;MAED;QACE,OAAO,IAAP;IAtDJ;EALe;;EA+DjBQ,uBAAuB,CAACpB,MAAD,EAAiC;IACtD,OAAOA,MAAM,CAACC,IAAPD,KAAgB,UAAvB;EACD;;AAjEgB,CAAnB;AAoEA,eAAeH,UAAf","names":["nanoid","BaseRouter","getStateForAction","state","action","type","index","source","routes","findIndex","r","key","map","i","params","payload","nextState","length","some","route","routeNames","includes","name","stale","shouldActionChangeFocus"],"sources":["C:\\Users\\mateo\\Desktop\\React\\react-test\\node_modules\\@react-navigation\\routers\\lib\\module\\BaseRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport type {\n  CommonNavigationAction,\n  NavigationState,\n  PartialState,\n} from './types';\n\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\nconst BaseRouter = {\n  getStateForAction<State extends NavigationState>(\n    state: State,\n    action: CommonNavigationAction\n  ): State | PartialState<State> | null {\n    switch (action.type) {\n      case 'SET_PARAMS': {\n        const index = action.source\n          ? state.routes.findIndex((r) => r.key === action.source)\n          : state.index;\n\n        if (index === -1) {\n          return null;\n        }\n\n        return {\n          ...state,\n          routes: state.routes.map((r, i) =>\n            i === index\n              ? { ...r, params: { ...r.params, ...action.payload.params } }\n              : r\n          ),\n        };\n      }\n\n      case 'RESET': {\n        const nextState = action.payload as State | PartialState<State>;\n\n        if (\n          nextState.routes.length === 0 ||\n          nextState.routes.some(\n            (route: { name: string }) => !state.routeNames.includes(route.name)\n          )\n        ) {\n          return null;\n        }\n\n        if (nextState.stale === false) {\n          if (\n            state.routeNames.length !== nextState.routeNames.length ||\n            nextState.routeNames.some(\n              (name) => !state.routeNames.includes(name)\n            )\n          ) {\n            return null;\n          }\n\n          return {\n            ...nextState,\n            routes: nextState.routes.map((route) =>\n              route.key ? route : { ...route, key: `${route.name}-${nanoid()}` }\n            ),\n          };\n        }\n\n        return nextState;\n      }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action: CommonNavigationAction) {\n    return action.type === 'NAVIGATE';\n  },\n};\n\nexport default BaseRouter;\n"]},"metadata":{},"sourceType":"module"}